
// -*- coding: utf-8 -*-

syntax = "proto3";

package nlaapi;

//
// Common
//
message NlMsghdr {
  uint32 len    = 1;
  uint32 type   = 2; // RTM_*
  uint32 flags  = 3;
  uint32 seq    = 4;
  uint32 pid    = 5;
}

//
// Core API
//
service NLACoreApi {
  rpc SendNetlinkMessage(NetlinkMessage) returns (NetlinkMessageReply) {}
  rpc MonNetlinkMessage(Node) returns (stream NetlinkMessageUnion) {}
}

//
// Message Source
//
enum NlMsgSrc {
  NOP = 0;
  KNL = 1;
  API = 2;
}

message NetlinkMessage {
  NlMsghdr header = 1;
  bytes    data   = 2;
  uint32   n_id   = 3;
  NlMsgSrc src    = 4;
}

message NetlinkMessageReply {

}

//
// Application API
//
service NLAApi {
  rpc ModVpn    (ModVpnRequest)     returns (ModVpnReply)   {}
  rpc ModNetlink(NetlinkMessageUnion) returns (ModNetlinkReply) {}
  rpc MonNetlink(MonNetlinkRequest) returns (stream NetlinkMessageUnion) {}

  rpc GetLink   (LinkKey)  returns (Link) {}
  rpc GetAddr   (AddrKey)  returns (Addr) {}
  rpc GetNeigh  (NeighKey) returns (Neigh){}
  rpc GetRoute  (RouteKey) returns (Route){}
  rpc GetMpls   (MplsKey)  returns (Route){}
  rpc GetNode   (NodeKey)  returns (Node) {}
  rpc GetVpn    (VpnKey)   returns (Vpn)  {}
  rpc GetEncapInfo (EncapInfoKey) returns (EncapInfo) {}
  rpc GetIptun  (IptunKey) returns (Iptun) {}
  rpc GetBridgeVlanInfo (BridgeVlanInfoKey) returns (BridgeVlanInfo) {}

  rpc GetLinks  (GetLinksRequest)   returns (stream Link) {}
  rpc GetAddrs  (GetAddrsRequest)   returns (stream Addr) {}
  rpc GetNeighs (GetNeighsRequest)  returns (stream Neigh){}
  rpc GetRoutes (GetRoutesRequest)  returns (stream Route){}
  rpc GetMplss  (GetMplssRequest)   returns (stream Route){}
  rpc GetNodes  (GetNodesRequest)   returns (stream Node) {}
  rpc GetVpns   (GetVpnsRequest)    returns (stream Vpn)  {}
  rpc GetEncapInfos (GetEncapInfosRequest) returns (stream EncapInfo) {}
  rpc GetIptuns (GetIptunsRequest) returns  (stream Iptun) {}
  rpc GetBridgeVlanInfos (GetBridgeVlanInfosRequest) returns (stream BridgeVlanInfo) {}

  rpc GetStats  (GetStatsRequest)   returns (stream Stat) {}
}

message MonNetlinkRequest {}

message NlMsgUni {
    oneof msg {
        Link   link   = 1;
        Addr   addr   = 2;
        Neigh  neigh  = 3;
        Route  route  = 4;
        Node   node   = 5;
        Vpn    vpn    = 6;
        BridgeVlanInfo br_vlan_info = 7;
    }
}

message NetlinkMessageUnion {
    NlMsghdr header = 1;
    NlMsgUni msg    = 2;
    uint32   n_id   = 3;
    NlMsgSrc src    = 4;
}

message ModVpnRequest {
    uint32 type  = 1;  // RTM_NEWVPN or RTM_DELVPN
    Vpn    vpn   = 2;
}

message ModVpnReply {}
message ModNetlinkReply {}

message GetLinksRequest {
  uint32 n_id = 1; // 255: all nodes.
}

message GetAddrsRequest {
  uint32 n_id = 1; // 255: all nodes.
}

message GetNeighsRequest{
  uint32 n_id = 1; // 255: all nodes.
}

message GetRoutesRequest{
  uint32 n_id = 1; // 255: all nodes.
}

message GetMplssRequest {
  uint32 n_id = 1; // 255: all nodes.
}

message GetBridgeVlanInfosRequest {
  uint32 n_id = 1; // 255: all nodes.
}

message GetNodesRequest {}
message GetVpnsRequest  {}
message GetEncapInfosRequest {}
message GetIptunsRequest {}
message GetStatsRequest  {}

message LinkKey {
    uint32 n_id  = 1;
    int32  index = 2;
}

message AddrKey {
    uint32 n_id = 1;
    string addr = 2;
}

message NeighKey {
    uint32 n_id = 1;
    string addr = 2;
    int32  ifindex = 3;
    int32  vlan_id = 4;
}

message RouteKey {
    uint32 n_id = 1;
    string addr = 2;
}

message MplsKey {
    uint32 n_id    = 1;
    uint32 l_label = 2;
}

message NodeKey {
    uint32 n_id = 1;
}

message VpnKey {
    uint32 n_id = 1;
    string dst  = 2;
    string gw   = 3;
}

message IptunKey {
  uint32 n_id   = 1;
  bytes  remote = 2; // net.IP
}

message BridgeVlanInfoKey {
  uint32 n_id = 1;
  int32 index = 2;
  uint32 vid  = 3;
}

//
// Messages
//
message Stat {
    string key = 1;
    uint64 val = 2;
}

message Node {
    bytes  ip   = 1;
    uint32 n_id = 2;
}

message Vpn {
    bytes  ip    = 1;  // net.IP
    bytes  mask  = 2;  // net.IPMask
    bytes  gw    = 3;  // net.IP
    uint32 label = 4;
    bytes  vpn_gw= 5;  // net.IP

    uint32 n_id  = 6;
    uint32 vpn_id= 7;
}

message Iptun {
  Link  link      = 1;
  bytes local_mac = 2; // net.HardwareAddr

  uint32 n_id     = 3;
  uint32 tnl_id   = 4;
}

message BridgeVlanInfo {
  enum Flags {
    NOP         = 0;
    MASTER      = 1;
    PVID        = 2;
    UNTAGGED    = 4;
    RANGE_BEGIN = 8;
    RANGE_END   = 16;
  }

  enum PortType {
    NONE_PORT   = 0;
    ACCESS_PORT = 1;
    TRUNK_PORT  = 2;
    MASTER_PORT = 3;
  }

  Flags  flags        = 1;
  uint32 vid          = 2;
  int32  index        = 3;
  string name         = 4;
  int32  master_index = 5;
  uint32 mtu          = 6;

  uint32 n_id         = 7;
  uint32 br_id        = 8;
}

enum LinkOperState {
    OperUnknown    = 0;
    OperNotPresent = 1;
    OperDown       = 2;
    OperLowerLayerDown = 3;
    OperTesting    = 4;
    OperDormant    = 5;
    OperUp         = 6;
}

enum BondLinkState {
  BOND_LINK_UP   = 0;
  BOND_LINK_FAIL = 1;
  BOND_LINK_DOWN = 2;
  BOND_LINK_BACK = 3;
  BOND_LINK_UNKNOWN = -1;
}

enum BondState {
  BOND_STATE_ACTIVE = 0;
  BOND_STATE_BACKUP = 1;
  BOND_STATE_UNKNOWN = -1;
}

message BondSlaveInfo {
  BondState     state      = 1;
  BondLinkState mii_status = 2;
  uint32        link_failure_count = 3;
  bytes         permanent_hw_addr  = 4;
  int32         queue_id           = 5;
  int32         aggregator_id      = 6;
  int32         actor_oper_port_state     = 7;
  int32         ad_partner_oper_port_state = 8;
}

message LinkAttrs {
  int32    index         = 1;
  int32    mtu           = 2;
  int32    tx_q_len      = 3;
  string   name          = 4;
  bytes    hardware_addr = 5; // net.HardwareAddr
  uint32   flags         = 6; // net.Flags
  uint32   raw_flags     = 7;
  int32    parent_index  = 8;
  int32    master_index  = 9;
  string   alias         = 10;
  int32    promisc       = 11;
  string   encap_type    = 12;
  LinkOperState oper_state=13;
  oneof slave_info {
    BondSlaveInfo bond_slave_info = 14;
  }
}

message GenericLinkAttrs {
  LinkAttrs link_attrs = 1;
}

message DeviceLinkAttrs {
  LinkAttrs link_attrs = 1;
}

message BridgeLinkAttrs {
  LinkAttrs link_attrs = 1;
  bool      multicast_snooping = 2;
  uint32    hello_time         = 3;
  bool      vlan_filtering     = 4;
}

message VlanLinkAttrs {
  LinkAttrs link_attrs = 1;
  int32     vlan_id    = 2;
}

message VxlanLinkAttrs {
  LinkAttrs link_attrs     = 1;
  int32     vxlan_id       = 2;
  int32     vtep_dev_index = 3;
  bytes     src_addr       = 4; // net.IP
  bytes     group          = 5; // net.IP
  int32     ttl            = 6;
  int32     tos            = 7;
  bool      learning       = 8;
  bool      proxy          = 9;
  bool      rsc            = 10;
  bool      l2miss         = 11;
  bool      l3miss         = 12;
  bool      udp_c_sum      = 13;
  bool      no_age         = 14;
  bool      gbp            = 15;
  int32     age            = 16;
  int32     limit          = 17;
  int32     port           = 18;
  int32     port_low       = 19;
  int32     port_high      = 20;
}

message VtiLinkAttrs {
  LinkAttrs link_attrs = 1;
  uint32    i_key      = 2;
  uint32    o_key      = 3;
  uint32    link       = 4;
  bytes     local      = 5; // net.IP
  bytes     remote     = 6; // net.IP
}

message VethLinkAttrs {
  LinkAttrs link_attrs = 1;
  string peer_name     = 2;
}

enum BondMode {
    BOND_MODE_BALANCE_RR    = 0;
    BOND_MODE_ACTIVE_BACKUP = 1;
    BOND_MODE_BALANCE_XOR   = 2;
    BOND_MODE_BROADCAST     = 3;
    BOND_MODE_802_3AD       = 4;
    BOND_MODE_BALANCE_TLB   = 5;
    BOND_MODE_BALANCE_ALB   = 6;
    BOND_MODE_UNKNOWN       = 7;
}

enum BondArpValidate {
    BOND_ARP_VALIDATE_NONE   = 0;
    BOND_ARP_VALIDATE_ACTIVE = 1;
    BOND_ARP_VALIDATE_BACKUP = 2;
    BOND_ARP_VALIDATE_ALL    = 3;
}

enum BondArpAllTargets {
    BOND_ARP_ALL_TARGETS_ANY = 0;
    BOND_ARP_ALL_TARGETS_ALL = 1;
}

enum BondPrimaryReselect {
    BOND_PRIMARY_RESELECT_ALWAYS  = 0;
    BOND_PRIMARY_RESELECT_BETTER  = 1;
    BOND_PRIMARY_RESELECT_FAILURE = 2;
}

enum BondFailOverMac {
    BOND_FAIL_OVER_MAC_NONE   = 0;
    BOND_FAIL_OVER_MAC_ACTIVE = 1;
    BOND_FAIL_OVER_MAC_FOLLOW = 2;
}

enum BondXmitHashPolicy {
    BOND_XMIT_HASH_POLICY_LAYER2   = 0;
    BOND_XMIT_HASH_POLICY_LAYER3_4 = 1;
    BOND_XMIT_HASH_POLICY_LAYER2_3 = 2;
    BOND_XMIT_HASH_POLICY_ENCAP2_3 = 3;
    BOND_XMIT_HASH_POLICY_ENCAP3_4 = 4;
    BOND_XMIT_HASH_POLICY_UNKNOWN  = 5;
}

enum BondLacpRate {
    BOND_LACP_RATE_SLOW    = 0;
    BOND_LACP_RATE_FAST    = 1;
    BOND_LACP_RATE_UNKNOWN = 2;
}

enum BondAdSelect {
    BOND_AD_SELECT_STABLE    = 0;
    BOND_AD_SELECT_BANDWIDTH = 1;
    BOND_AD_SELECT_COUNT     = 2;
}

message BondAdInfo {
    int32  aggregator_id = 1;
    int32  num_ports     = 2;
    int32  actor_key     = 3;
    int32  partner_key   = 4;
    bytes  partner_mac   = 5; // net.HardwareAddr
}

message BondLinkAttrs {
    LinkAttrs           link_attrs        = 1;
    BondMode            mode              = 2;
    int32               active_slave      = 3;
    int32               miimon            = 4;
    int32               up_delay          = 5;
    int32               down_delay        = 6;
    int32               use_carrier       = 7;
    int32               arp_interval      = 8;
    repeated bytes      arp_ip_targets    = 9; // []net.IP
    BondArpValidate     arp_validate      = 10;
    BondArpAllTargets   arp_all_targets   = 11;
    int32               primary           = 12;
    BondPrimaryReselect primary_reselect  = 13;
    BondFailOverMac     fail_over_mac     = 14;
    BondXmitHashPolicy  xmit_hash_policy  = 15;
    int32               resend_igmp       = 16;
    int32               num_peer_notif    = 17;
    int32               all_slaves_active = 18;
    int32               min_links         = 19;
    int32               lp_interval       = 20;
    int32               packers_per_slave = 21;
    BondLacpRate        lacp_rate         = 22;
    BondAdSelect        ad_select         = 23;
    BondAdInfo          ad_info           = 24;
}

message IptunLinkAttrs {
  LinkAttrs link_attrs  = 1;
  uint32    ttl         = 2;
  uint32    tos         = 3;
  uint32    p_mtu_disc  = 4;
  uint32    link        = 5;
  bytes     local       = 6; // net.IP
  bytes     remote      = 7; // net.IP
  uint32    encap_sport = 8;
  uint32    encap_dport = 9;
  uint32    encap_type  = 10;
  uint32    encap_flags = 11;
  bool      flow_based  = 12;
}

message Link {
  string type  = 1;
  oneof link_attrs {
        DeviceLinkAttrs  device  = 4;
        BridgeLinkAttrs  bridge  = 5;
        VlanLinkAttrs    vlan    = 6;
        VxlanLinkAttrs   vxlan   = 7;
        VtiLinkAttrs     vti     = 8;
        VethLinkAttrs    veth    = 9;
        BondLinkAttrs    bond    = 10;
        GenericLinkAttrs generic = 11;
        IptunLinkAttrs   iptun   = 12;
    }

  uint32 n_id  = 2;
  uint32 ln_id = 3;
}

message Addr {
    bytes   ip         = 1; // net.IPNet
    bytes   ip_mask    = 2; // net.IPNet
    string  label      = 3;
    int32   flags      = 4;
    int32   scope      = 5;
    bytes   peer       = 6; // net.IPNet
    bytes   peer_mask  = 7; // net.IPNet
    bytes   broadcast  = 8; // net.IP
    int32   index      = 9;
    int32   family     = 10;

    uint32 n_id        = 11;
    uint32 ad_id       = 12;
}

message NeighNotun {

}

message NeighIptun {
    string tun_type = 1;
    bytes  src_ip   = 2;  // net.IP
}

message Neigh {
    int32  link_index    = 1;
    int32  family        = 2;
    int32  state         = 3;
    int32  type          = 4;
    int32  flags         = 5;
    bytes  ip            = 6; // net.IP
    bytes  hardware_addr = 7; // net.HardwareAddr
    bytes  ll_ip_addr    = 8; // net.IP
    int32  vlan_id       = 9;
    int32  vni           = 10;

    uint32 n_id  = 11;
    uint32 ne_id = 12;

    int32 phy_link = 13;
    oneof tunnel {
        NeighNotun notun = 14;
        NeighIptun iptun = 15;
    }
}

message NexthopInfo {
    int32  link_index   = 1;
    int32  hops         = 2;
    bytes  gw           = 3; // net.IP
    int32  flags        = 4;
    Destination new_dst = 5;
    Encap  encap        = 6;
}

message MPLSDestination {
    repeated uint32 labels = 1;
}

message Destination {
    int32 family             = 1;
    oneof dest {
        MPLSDestination mpls = 2;
    }
}

message MPLSEncap {
    repeated uint32 labels = 1;
}

message Encap {
    uint32  type       = 1; // nl.LWTUNNEL_ENCAP_*
    oneof   encap {
        MPLSEncap mpls = 2;
    }
}

message EncapInfoKey {
    string dst   = 1; // ip/mask
    uint32 vrf   = 2; // mpls:0, vrf:label
}

message EncapInfo {
    bytes  ip    = 1; // mpls:dst.ip,   vrf:nexthop
    bytes  mask  = 2; // mpls:dst.mask, vrf:32 or 128
    uint32 vrf   = 3; // mpls:0,        vrf:label
    uint32 en_id = 4;
}

message Route {
    int32    link_index    = 1;
    int32    i_link_index  = 2;
    int32    scope         = 3; // netlink.Scope
    bytes    dst           = 4; // net.IPNet
    bytes    dst_mask      = 5; // net.IPNet
    bytes    src           = 6; // net.IP
    bytes    gw            = 7; // net.IP
    repeated NexthopInfo multi_path = 8;
    int32    protocol      = 9;
    int32    priority      = 10;
    int32    table         = 11;
    int32    type          = 12;
    int32    tos           = 13;
    int32    flags         = 14;
    int32    mpls_dst      = 15; // -1: Invalid
    Destination new_dst    = 16;
    Encap    encap         = 17;

    uint32 n_id            = 18;
    uint32 rt_id           = 19;
    bytes  vpn_gw          = 20; // net.IP
    repeated uint32 en_ids = 21; // EncapId.en_id
}
