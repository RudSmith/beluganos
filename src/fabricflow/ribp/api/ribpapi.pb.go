// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ribpapi.proto

package ribpapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FFPacketRequest struct {
	Ifname               string   `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFPacketRequest) Reset()         { *m = FFPacketRequest{} }
func (m *FFPacketRequest) String() string { return proto.CompactTextString(m) }
func (*FFPacketRequest) ProtoMessage()    {}
func (*FFPacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ribpapi_0e0bb1648b6b1468, []int{0}
}
func (m *FFPacketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFPacketRequest.Unmarshal(m, b)
}
func (m *FFPacketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFPacketRequest.Marshal(b, m, deterministic)
}
func (dst *FFPacketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFPacketRequest.Merge(dst, src)
}
func (m *FFPacketRequest) XXX_Size() int {
	return xxx_messageInfo_FFPacketRequest.Size(m)
}
func (m *FFPacketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FFPacketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FFPacketRequest proto.InternalMessageInfo

func (m *FFPacketRequest) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

type SendFFPacketReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendFFPacketReply) Reset()         { *m = SendFFPacketReply{} }
func (m *SendFFPacketReply) String() string { return proto.CompactTextString(m) }
func (*SendFFPacketReply) ProtoMessage()    {}
func (*SendFFPacketReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ribpapi_0e0bb1648b6b1468, []int{1}
}
func (m *SendFFPacketReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendFFPacketReply.Unmarshal(m, b)
}
func (m *SendFFPacketReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendFFPacketReply.Marshal(b, m, deterministic)
}
func (dst *SendFFPacketReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendFFPacketReply.Merge(dst, src)
}
func (m *SendFFPacketReply) XXX_Size() int {
	return xxx_messageInfo_SendFFPacketReply.Size(m)
}
func (m *SendFFPacketReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendFFPacketReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendFFPacketReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FFPacketRequest)(nil), "ribpapi.FFPacketRequest")
	proto.RegisterType((*SendFFPacketReply)(nil), "ribpapi.SendFFPacketReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RIBPApiClient is the client API for RIBPApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RIBPApiClient interface {
	SendFFPacket(ctx context.Context, in *FFPacketRequest, opts ...grpc.CallOption) (*SendFFPacketReply, error)
}

type rIBPApiClient struct {
	cc *grpc.ClientConn
}

func NewRIBPApiClient(cc *grpc.ClientConn) RIBPApiClient {
	return &rIBPApiClient{cc}
}

func (c *rIBPApiClient) SendFFPacket(ctx context.Context, in *FFPacketRequest, opts ...grpc.CallOption) (*SendFFPacketReply, error) {
	out := new(SendFFPacketReply)
	err := c.cc.Invoke(ctx, "/ribpapi.RIBPApi/SendFFPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RIBPApiServer is the server API for RIBPApi service.
type RIBPApiServer interface {
	SendFFPacket(context.Context, *FFPacketRequest) (*SendFFPacketReply, error)
}

func RegisterRIBPApiServer(s *grpc.Server, srv RIBPApiServer) {
	s.RegisterService(&_RIBPApi_serviceDesc, srv)
}

func _RIBPApi_SendFFPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RIBPApiServer).SendFFPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ribpapi.RIBPApi/SendFFPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RIBPApiServer).SendFFPacket(ctx, req.(*FFPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RIBPApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ribpapi.RIBPApi",
	HandlerType: (*RIBPApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFFPacket",
			Handler:    _RIBPApi_SendFFPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ribpapi.proto",
}

func init() { proto.RegisterFile("ribpapi.proto", fileDescriptor_ribpapi_0e0bb1648b6b1468) }

var fileDescriptor_ribpapi_0e0bb1648b6b1468 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xca, 0x4c, 0x2a,
	0x48, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x34, 0xb9,
	0xf8, 0xdd, 0xdc, 0x02, 0x12, 0x93, 0xb3, 0x53, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xc4, 0xb8, 0xd8, 0x32, 0xd3, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0xa0, 0x3c, 0x25, 0x61, 0x2e, 0xc1, 0xe0, 0xd4, 0xbc, 0x14, 0x84, 0xf2, 0x82, 0x9c, 0x4a,
	0xa3, 0x40, 0x2e, 0xf6, 0x20, 0x4f, 0xa7, 0x00, 0xc7, 0x82, 0x4c, 0x21, 0x37, 0x2e, 0x1e, 0x64,
	0x79, 0x21, 0x09, 0x3d, 0x98, 0x9d, 0x68, 0x36, 0x48, 0x49, 0xc1, 0x65, 0x30, 0x0c, 0x54, 0x62,
	0x48, 0x62, 0x03, 0x3b, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x54, 0x9e, 0x86, 0xb3,
	0x00, 0x00, 0x00,
}
