// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fibcapis.proto

package fibcapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DbDpEntry_Type int32

const (
	DbDpEntry_NOP   DbDpEntry_Type = 0
	DbDpEntry_APMON DbDpEntry_Type = 1
	DbDpEntry_VMMON DbDpEntry_Type = 2
	DbDpEntry_DPMON DbDpEntry_Type = 3
	DbDpEntry_VSMON DbDpEntry_Type = 4
)

var DbDpEntry_Type_name = map[int32]string{
	0: "NOP",
	1: "APMON",
	2: "VMMON",
	3: "DPMON",
	4: "VSMON",
}

var DbDpEntry_Type_value = map[string]int32{
	"NOP":   0,
	"APMON": 1,
	"VMMON": 2,
	"DPMON": 3,
	"VSMON": 4,
}

func (x DbDpEntry_Type) String() string {
	return proto.EnumName(DbDpEntry_Type_name, int32(x))
}

func (DbDpEntry_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{36, 0}
}

//
// Common
//
type HelloReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{0}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

type PortConfigReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortConfigReply) Reset()         { *m = PortConfigReply{} }
func (m *PortConfigReply) String() string { return proto.CompactTextString(m) }
func (*PortConfigReply) ProtoMessage()    {}
func (*PortConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{1}
}

func (m *PortConfigReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortConfigReply.Unmarshal(m, b)
}
func (m *PortConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortConfigReply.Marshal(b, m, deterministic)
}
func (m *PortConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortConfigReply.Merge(m, src)
}
func (m *PortConfigReply) XXX_Size() int {
	return xxx_messageInfo_PortConfigReply.Size(m)
}
func (m *PortConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PortConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_PortConfigReply proto.InternalMessageInfo

type L2AddrReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2AddrReply) Reset()         { *m = L2AddrReply{} }
func (m *L2AddrReply) String() string { return proto.CompactTextString(m) }
func (*L2AddrReply) ProtoMessage()    {}
func (*L2AddrReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{2}
}

func (m *L2AddrReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2AddrReply.Unmarshal(m, b)
}
func (m *L2AddrReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2AddrReply.Marshal(b, m, deterministic)
}
func (m *L2AddrReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2AddrReply.Merge(m, src)
}
func (m *L2AddrReply) XXX_Size() int {
	return xxx_messageInfo_L2AddrReply.Size(m)
}
func (m *L2AddrReply) XXX_DiscardUnknown() {
	xxx_messageInfo_L2AddrReply.DiscardUnknown(m)
}

var xxx_messageInfo_L2AddrReply proto.InternalMessageInfo

type FlowModReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowModReply) Reset()         { *m = FlowModReply{} }
func (m *FlowModReply) String() string { return proto.CompactTextString(m) }
func (*FlowModReply) ProtoMessage()    {}
func (*FlowModReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{3}
}

func (m *FlowModReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowModReply.Unmarshal(m, b)
}
func (m *FlowModReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowModReply.Marshal(b, m, deterministic)
}
func (m *FlowModReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowModReply.Merge(m, src)
}
func (m *FlowModReply) XXX_Size() int {
	return xxx_messageInfo_FlowModReply.Size(m)
}
func (m *FlowModReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowModReply.DiscardUnknown(m)
}

var xxx_messageInfo_FlowModReply proto.InternalMessageInfo

type GroupModReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupModReply) Reset()         { *m = GroupModReply{} }
func (m *GroupModReply) String() string { return proto.CompactTextString(m) }
func (*GroupModReply) ProtoMessage()    {}
func (*GroupModReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{4}
}

func (m *GroupModReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupModReply.Unmarshal(m, b)
}
func (m *GroupModReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupModReply.Marshal(b, m, deterministic)
}
func (m *GroupModReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupModReply.Merge(m, src)
}
func (m *GroupModReply) XXX_Size() int {
	return xxx_messageInfo_GroupModReply.Size(m)
}
func (m *GroupModReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupModReply.DiscardUnknown(m)
}

var xxx_messageInfo_GroupModReply proto.InternalMessageInfo

type L2AddrStatusReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2AddrStatusReply) Reset()         { *m = L2AddrStatusReply{} }
func (m *L2AddrStatusReply) String() string { return proto.CompactTextString(m) }
func (*L2AddrStatusReply) ProtoMessage()    {}
func (*L2AddrStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{5}
}

func (m *L2AddrStatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2AddrStatusReply.Unmarshal(m, b)
}
func (m *L2AddrStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2AddrStatusReply.Marshal(b, m, deterministic)
}
func (m *L2AddrStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2AddrStatusReply.Merge(m, src)
}
func (m *L2AddrStatusReply) XXX_Size() int {
	return xxx_messageInfo_L2AddrStatusReply.Size(m)
}
func (m *L2AddrStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_L2AddrStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_L2AddrStatusReply proto.InternalMessageInfo

type FFHelloReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFHelloReply) Reset()         { *m = FFHelloReply{} }
func (m *FFHelloReply) String() string { return proto.CompactTextString(m) }
func (*FFHelloReply) ProtoMessage()    {}
func (*FFHelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{6}
}

func (m *FFHelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFHelloReply.Unmarshal(m, b)
}
func (m *FFHelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFHelloReply.Marshal(b, m, deterministic)
}
func (m *FFHelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFHelloReply.Merge(m, src)
}
func (m *FFHelloReply) XXX_Size() int {
	return xxx_messageInfo_FFHelloReply.Size(m)
}
func (m *FFHelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FFHelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_FFHelloReply proto.InternalMessageInfo

type FFPacketReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFPacketReply) Reset()         { *m = FFPacketReply{} }
func (m *FFPacketReply) String() string { return proto.CompactTextString(m) }
func (*FFPacketReply) ProtoMessage()    {}
func (*FFPacketReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{7}
}

func (m *FFPacketReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFPacketReply.Unmarshal(m, b)
}
func (m *FFPacketReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFPacketReply.Marshal(b, m, deterministic)
}
func (m *FFPacketReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFPacketReply.Merge(m, src)
}
func (m *FFPacketReply) XXX_Size() int {
	return xxx_messageInfo_FFPacketReply.Size(m)
}
func (m *FFPacketReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FFPacketReply.DiscardUnknown(m)
}

var xxx_messageInfo_FFPacketReply proto.InternalMessageInfo

type FFPacketInReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFPacketInReply) Reset()         { *m = FFPacketInReply{} }
func (m *FFPacketInReply) String() string { return proto.CompactTextString(m) }
func (*FFPacketInReply) ProtoMessage()    {}
func (*FFPacketInReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{8}
}

func (m *FFPacketInReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFPacketInReply.Unmarshal(m, b)
}
func (m *FFPacketInReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFPacketInReply.Marshal(b, m, deterministic)
}
func (m *FFPacketInReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFPacketInReply.Merge(m, src)
}
func (m *FFPacketInReply) XXX_Size() int {
	return xxx_messageInfo_FFPacketInReply.Size(m)
}
func (m *FFPacketInReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FFPacketInReply.DiscardUnknown(m)
}

var xxx_messageInfo_FFPacketInReply proto.InternalMessageInfo

type FFPortStatusReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFPortStatusReply) Reset()         { *m = FFPortStatusReply{} }
func (m *FFPortStatusReply) String() string { return proto.CompactTextString(m) }
func (*FFPortStatusReply) ProtoMessage()    {}
func (*FFPortStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{9}
}

func (m *FFPortStatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFPortStatusReply.Unmarshal(m, b)
}
func (m *FFPortStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFPortStatusReply.Marshal(b, m, deterministic)
}
func (m *FFPortStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFPortStatusReply.Merge(m, src)
}
func (m *FFPortStatusReply) XXX_Size() int {
	return xxx_messageInfo_FFPortStatusReply.Size(m)
}
func (m *FFPortStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FFPortStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_FFPortStatusReply proto.InternalMessageInfo

//
// FIBCApApi
//
type ApMonitorRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApMonitorRequest) Reset()         { *m = ApMonitorRequest{} }
func (m *ApMonitorRequest) String() string { return proto.CompactTextString(m) }
func (*ApMonitorRequest) ProtoMessage()    {}
func (*ApMonitorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{10}
}

func (m *ApMonitorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApMonitorRequest.Unmarshal(m, b)
}
func (m *ApMonitorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApMonitorRequest.Marshal(b, m, deterministic)
}
func (m *ApMonitorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApMonitorRequest.Merge(m, src)
}
func (m *ApMonitorRequest) XXX_Size() int {
	return xxx_messageInfo_ApMonitorRequest.Size(m)
}
func (m *ApMonitorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApMonitorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApMonitorRequest proto.InternalMessageInfo

type ApMonitorReplyLog struct {
	Line                 string   `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Time                 int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApMonitorReplyLog) Reset()         { *m = ApMonitorReplyLog{} }
func (m *ApMonitorReplyLog) String() string { return proto.CompactTextString(m) }
func (*ApMonitorReplyLog) ProtoMessage()    {}
func (*ApMonitorReplyLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{11}
}

func (m *ApMonitorReplyLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApMonitorReplyLog.Unmarshal(m, b)
}
func (m *ApMonitorReplyLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApMonitorReplyLog.Marshal(b, m, deterministic)
}
func (m *ApMonitorReplyLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApMonitorReplyLog.Merge(m, src)
}
func (m *ApMonitorReplyLog) XXX_Size() int {
	return xxx_messageInfo_ApMonitorReplyLog.Size(m)
}
func (m *ApMonitorReplyLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ApMonitorReplyLog.DiscardUnknown(m)
}

var xxx_messageInfo_ApMonitorReplyLog proto.InternalMessageInfo

func (m *ApMonitorReplyLog) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *ApMonitorReplyLog) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ApMonitorReplyLog) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ApMonitorReply struct {
	// Types that are valid to be assigned to Body:
	//	*ApMonitorReply_Log
	Body                 isApMonitorReply_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ApMonitorReply) Reset()         { *m = ApMonitorReply{} }
func (m *ApMonitorReply) String() string { return proto.CompactTextString(m) }
func (*ApMonitorReply) ProtoMessage()    {}
func (*ApMonitorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{12}
}

func (m *ApMonitorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApMonitorReply.Unmarshal(m, b)
}
func (m *ApMonitorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApMonitorReply.Marshal(b, m, deterministic)
}
func (m *ApMonitorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApMonitorReply.Merge(m, src)
}
func (m *ApMonitorReply) XXX_Size() int {
	return xxx_messageInfo_ApMonitorReply.Size(m)
}
func (m *ApMonitorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ApMonitorReply.DiscardUnknown(m)
}

var xxx_messageInfo_ApMonitorReply proto.InternalMessageInfo

type isApMonitorReply_Body interface {
	isApMonitorReply_Body()
}

type ApMonitorReply_Log struct {
	Log *ApMonitorReplyLog `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

func (*ApMonitorReply_Log) isApMonitorReply_Body() {}

func (m *ApMonitorReply) GetBody() isApMonitorReply_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ApMonitorReply) GetLog() *ApMonitorReplyLog {
	if x, ok := m.GetBody().(*ApMonitorReply_Log); ok {
		return x.Log
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApMonitorReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApMonitorReply_Log)(nil),
	}
}

type ApGetPortEntriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApGetPortEntriesRequest) Reset()         { *m = ApGetPortEntriesRequest{} }
func (m *ApGetPortEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ApGetPortEntriesRequest) ProtoMessage()    {}
func (*ApGetPortEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{13}
}

func (m *ApGetPortEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApGetPortEntriesRequest.Unmarshal(m, b)
}
func (m *ApGetPortEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApGetPortEntriesRequest.Marshal(b, m, deterministic)
}
func (m *ApGetPortEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApGetPortEntriesRequest.Merge(m, src)
}
func (m *ApGetPortEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ApGetPortEntriesRequest.Size(m)
}
func (m *ApGetPortEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApGetPortEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApGetPortEntriesRequest proto.InternalMessageInfo

type ApGetIdEntriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApGetIdEntriesRequest) Reset()         { *m = ApGetIdEntriesRequest{} }
func (m *ApGetIdEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ApGetIdEntriesRequest) ProtoMessage()    {}
func (*ApGetIdEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{14}
}

func (m *ApGetIdEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApGetIdEntriesRequest.Unmarshal(m, b)
}
func (m *ApGetIdEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApGetIdEntriesRequest.Marshal(b, m, deterministic)
}
func (m *ApGetIdEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApGetIdEntriesRequest.Merge(m, src)
}
func (m *ApGetIdEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ApGetIdEntriesRequest.Size(m)
}
func (m *ApGetIdEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApGetIdEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApGetIdEntriesRequest proto.InternalMessageInfo

type ApGetDpEntriesRequest struct {
	Type                 DbDpEntry_Type `protobuf:"varint,1,opt,name=type,proto3,enum=fibcapi.DbDpEntry_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ApGetDpEntriesRequest) Reset()         { *m = ApGetDpEntriesRequest{} }
func (m *ApGetDpEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ApGetDpEntriesRequest) ProtoMessage()    {}
func (*ApGetDpEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{15}
}

func (m *ApGetDpEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApGetDpEntriesRequest.Unmarshal(m, b)
}
func (m *ApGetDpEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApGetDpEntriesRequest.Marshal(b, m, deterministic)
}
func (m *ApGetDpEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApGetDpEntriesRequest.Merge(m, src)
}
func (m *ApGetDpEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ApGetDpEntriesRequest.Size(m)
}
func (m *ApGetDpEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApGetDpEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApGetDpEntriesRequest proto.InternalMessageInfo

func (m *ApGetDpEntriesRequest) GetType() DbDpEntry_Type {
	if m != nil {
		return m.Type
	}
	return DbDpEntry_NOP
}

type ApAddPortEntryReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApAddPortEntryReply) Reset()         { *m = ApAddPortEntryReply{} }
func (m *ApAddPortEntryReply) String() string { return proto.CompactTextString(m) }
func (*ApAddPortEntryReply) ProtoMessage()    {}
func (*ApAddPortEntryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{16}
}

func (m *ApAddPortEntryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApAddPortEntryReply.Unmarshal(m, b)
}
func (m *ApAddPortEntryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApAddPortEntryReply.Marshal(b, m, deterministic)
}
func (m *ApAddPortEntryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApAddPortEntryReply.Merge(m, src)
}
func (m *ApAddPortEntryReply) XXX_Size() int {
	return xxx_messageInfo_ApAddPortEntryReply.Size(m)
}
func (m *ApAddPortEntryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ApAddPortEntryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ApAddPortEntryReply proto.InternalMessageInfo

type ApAddIdEntryReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApAddIdEntryReply) Reset()         { *m = ApAddIdEntryReply{} }
func (m *ApAddIdEntryReply) String() string { return proto.CompactTextString(m) }
func (*ApAddIdEntryReply) ProtoMessage()    {}
func (*ApAddIdEntryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{17}
}

func (m *ApAddIdEntryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApAddIdEntryReply.Unmarshal(m, b)
}
func (m *ApAddIdEntryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApAddIdEntryReply.Marshal(b, m, deterministic)
}
func (m *ApAddIdEntryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApAddIdEntryReply.Merge(m, src)
}
func (m *ApAddIdEntryReply) XXX_Size() int {
	return xxx_messageInfo_ApAddIdEntryReply.Size(m)
}
func (m *ApAddIdEntryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ApAddIdEntryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ApAddIdEntryReply proto.InternalMessageInfo

type ApDelPortEntryReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApDelPortEntryReply) Reset()         { *m = ApDelPortEntryReply{} }
func (m *ApDelPortEntryReply) String() string { return proto.CompactTextString(m) }
func (*ApDelPortEntryReply) ProtoMessage()    {}
func (*ApDelPortEntryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{18}
}

func (m *ApDelPortEntryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApDelPortEntryReply.Unmarshal(m, b)
}
func (m *ApDelPortEntryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApDelPortEntryReply.Marshal(b, m, deterministic)
}
func (m *ApDelPortEntryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApDelPortEntryReply.Merge(m, src)
}
func (m *ApDelPortEntryReply) XXX_Size() int {
	return xxx_messageInfo_ApDelPortEntryReply.Size(m)
}
func (m *ApDelPortEntryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ApDelPortEntryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ApDelPortEntryReply proto.InternalMessageInfo

type ApDelIdEntryReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApDelIdEntryReply) Reset()         { *m = ApDelIdEntryReply{} }
func (m *ApDelIdEntryReply) String() string { return proto.CompactTextString(m) }
func (*ApDelIdEntryReply) ProtoMessage()    {}
func (*ApDelIdEntryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{19}
}

func (m *ApDelIdEntryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApDelIdEntryReply.Unmarshal(m, b)
}
func (m *ApDelIdEntryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApDelIdEntryReply.Marshal(b, m, deterministic)
}
func (m *ApDelIdEntryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApDelIdEntryReply.Merge(m, src)
}
func (m *ApDelIdEntryReply) XXX_Size() int {
	return xxx_messageInfo_ApDelIdEntryReply.Size(m)
}
func (m *ApDelIdEntryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ApDelIdEntryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ApDelIdEntryReply proto.InternalMessageInfo

type ApGetPortStatsRequest struct {
	DpId                 uint64   `protobuf:"varint,1,opt,name=dp_id,json=dpId,proto3" json:"dp_id,omitempty"`
	PortNo               uint32   `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Names                []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApGetPortStatsRequest) Reset()         { *m = ApGetPortStatsRequest{} }
func (m *ApGetPortStatsRequest) String() string { return proto.CompactTextString(m) }
func (*ApGetPortStatsRequest) ProtoMessage()    {}
func (*ApGetPortStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{20}
}

func (m *ApGetPortStatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApGetPortStatsRequest.Unmarshal(m, b)
}
func (m *ApGetPortStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApGetPortStatsRequest.Marshal(b, m, deterministic)
}
func (m *ApGetPortStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApGetPortStatsRequest.Merge(m, src)
}
func (m *ApGetPortStatsRequest) XXX_Size() int {
	return xxx_messageInfo_ApGetPortStatsRequest.Size(m)
}
func (m *ApGetPortStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApGetPortStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApGetPortStatsRequest proto.InternalMessageInfo

func (m *ApGetPortStatsRequest) GetDpId() uint64 {
	if m != nil {
		return m.DpId
	}
	return 0
}

func (m *ApGetPortStatsRequest) GetPortNo() uint32 {
	if m != nil {
		return m.PortNo
	}
	return 0
}

func (m *ApGetPortStatsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ApModPortStatsRequest struct {
	DpId                 uint64          `protobuf:"varint,1,opt,name=dp_id,json=dpId,proto3" json:"dp_id,omitempty"`
	PortNo               uint32          `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Cmd                  FFPortStats_Cmd `protobuf:"varint,3,opt,name=cmd,proto3,enum=fibcapi.FFPortStats_Cmd" json:"cmd,omitempty"`
	Names                []string        `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ApModPortStatsRequest) Reset()         { *m = ApModPortStatsRequest{} }
func (m *ApModPortStatsRequest) String() string { return proto.CompactTextString(m) }
func (*ApModPortStatsRequest) ProtoMessage()    {}
func (*ApModPortStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{21}
}

func (m *ApModPortStatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApModPortStatsRequest.Unmarshal(m, b)
}
func (m *ApModPortStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApModPortStatsRequest.Marshal(b, m, deterministic)
}
func (m *ApModPortStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApModPortStatsRequest.Merge(m, src)
}
func (m *ApModPortStatsRequest) XXX_Size() int {
	return xxx_messageInfo_ApModPortStatsRequest.Size(m)
}
func (m *ApModPortStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApModPortStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApModPortStatsRequest proto.InternalMessageInfo

func (m *ApModPortStatsRequest) GetDpId() uint64 {
	if m != nil {
		return m.DpId
	}
	return 0
}

func (m *ApModPortStatsRequest) GetPortNo() uint32 {
	if m != nil {
		return m.PortNo
	}
	return 0
}

func (m *ApModPortStatsRequest) GetCmd() FFPortStats_Cmd {
	if m != nil {
		return m.Cmd
	}
	return FFPortStats_GET
}

func (m *ApModPortStatsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ApModPortStatsReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApModPortStatsReply) Reset()         { *m = ApModPortStatsReply{} }
func (m *ApModPortStatsReply) String() string { return proto.CompactTextString(m) }
func (*ApModPortStatsReply) ProtoMessage()    {}
func (*ApModPortStatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{22}
}

func (m *ApModPortStatsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApModPortStatsReply.Unmarshal(m, b)
}
func (m *ApModPortStatsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApModPortStatsReply.Marshal(b, m, deterministic)
}
func (m *ApModPortStatsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApModPortStatsReply.Merge(m, src)
}
func (m *ApModPortStatsReply) XXX_Size() int {
	return xxx_messageInfo_ApModPortStatsReply.Size(m)
}
func (m *ApModPortStatsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ApModPortStatsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ApModPortStatsReply proto.InternalMessageInfo

//
// FIBCVmApi
//
type VmMonitorRequest struct {
	ReId                 string   `protobuf:"bytes,1,opt,name=re_id,json=reId,proto3" json:"re_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmMonitorRequest) Reset()         { *m = VmMonitorRequest{} }
func (m *VmMonitorRequest) String() string { return proto.CompactTextString(m) }
func (*VmMonitorRequest) ProtoMessage()    {}
func (*VmMonitorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{23}
}

func (m *VmMonitorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMonitorRequest.Unmarshal(m, b)
}
func (m *VmMonitorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMonitorRequest.Marshal(b, m, deterministic)
}
func (m *VmMonitorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMonitorRequest.Merge(m, src)
}
func (m *VmMonitorRequest) XXX_Size() int {
	return xxx_messageInfo_VmMonitorRequest.Size(m)
}
func (m *VmMonitorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMonitorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VmMonitorRequest proto.InternalMessageInfo

func (m *VmMonitorRequest) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

type VmMonitorReply struct {
	// Types that are valid to be assigned to Body:
	//	*VmMonitorReply_PortStatus
	//	*VmMonitorReply_DpStatus
	//	*VmMonitorReply_L2AddrStatus
	Body                 isVmMonitorReply_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VmMonitorReply) Reset()         { *m = VmMonitorReply{} }
func (m *VmMonitorReply) String() string { return proto.CompactTextString(m) }
func (*VmMonitorReply) ProtoMessage()    {}
func (*VmMonitorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{24}
}

func (m *VmMonitorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMonitorReply.Unmarshal(m, b)
}
func (m *VmMonitorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMonitorReply.Marshal(b, m, deterministic)
}
func (m *VmMonitorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMonitorReply.Merge(m, src)
}
func (m *VmMonitorReply) XXX_Size() int {
	return xxx_messageInfo_VmMonitorReply.Size(m)
}
func (m *VmMonitorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMonitorReply.DiscardUnknown(m)
}

var xxx_messageInfo_VmMonitorReply proto.InternalMessageInfo

type isVmMonitorReply_Body interface {
	isVmMonitorReply_Body()
}

type VmMonitorReply_PortStatus struct {
	PortStatus *PortStatus `protobuf:"bytes,1,opt,name=port_status,json=portStatus,proto3,oneof"`
}

type VmMonitorReply_DpStatus struct {
	DpStatus *DpStatus `protobuf:"bytes,2,opt,name=dp_status,json=dpStatus,proto3,oneof"`
}

type VmMonitorReply_L2AddrStatus struct {
	L2AddrStatus *L2AddrStatus `protobuf:"bytes,3,opt,name=l2_addr_status,json=l2AddrStatus,proto3,oneof"`
}

func (*VmMonitorReply_PortStatus) isVmMonitorReply_Body() {}

func (*VmMonitorReply_DpStatus) isVmMonitorReply_Body() {}

func (*VmMonitorReply_L2AddrStatus) isVmMonitorReply_Body() {}

func (m *VmMonitorReply) GetBody() isVmMonitorReply_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *VmMonitorReply) GetPortStatus() *PortStatus {
	if x, ok := m.GetBody().(*VmMonitorReply_PortStatus); ok {
		return x.PortStatus
	}
	return nil
}

func (m *VmMonitorReply) GetDpStatus() *DpStatus {
	if x, ok := m.GetBody().(*VmMonitorReply_DpStatus); ok {
		return x.DpStatus
	}
	return nil
}

func (m *VmMonitorReply) GetL2AddrStatus() *L2AddrStatus {
	if x, ok := m.GetBody().(*VmMonitorReply_L2AddrStatus); ok {
		return x.L2AddrStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VmMonitorReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VmMonitorReply_PortStatus)(nil),
		(*VmMonitorReply_DpStatus)(nil),
		(*VmMonitorReply_L2AddrStatus)(nil),
	}
}

//
// FIBCVsApi
//
type VsMonitorRequest struct {
	VsId                 uint64         `protobuf:"varint,1,opt,name=vs_id,json=vsId,proto3" json:"vs_id,omitempty"`
	DpType               FFHello_DpType `protobuf:"varint,2,opt,name=dp_type,json=dpType,proto3,enum=fibcapi.FFHello_DpType" json:"dp_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VsMonitorRequest) Reset()         { *m = VsMonitorRequest{} }
func (m *VsMonitorRequest) String() string { return proto.CompactTextString(m) }
func (*VsMonitorRequest) ProtoMessage()    {}
func (*VsMonitorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{25}
}

func (m *VsMonitorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VsMonitorRequest.Unmarshal(m, b)
}
func (m *VsMonitorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VsMonitorRequest.Marshal(b, m, deterministic)
}
func (m *VsMonitorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VsMonitorRequest.Merge(m, src)
}
func (m *VsMonitorRequest) XXX_Size() int {
	return xxx_messageInfo_VsMonitorRequest.Size(m)
}
func (m *VsMonitorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VsMonitorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VsMonitorRequest proto.InternalMessageInfo

func (m *VsMonitorRequest) GetVsId() uint64 {
	if m != nil {
		return m.VsId
	}
	return 0
}

func (m *VsMonitorRequest) GetDpType() FFHello_DpType {
	if m != nil {
		return m.DpType
	}
	return FFHello_NOP
}

type VsMonitorReply struct {
	// Types that are valid to be assigned to Body:
	//	*VsMonitorReply_PacketOut
	//	*VsMonitorReply_PortMod
	Body                 isVsMonitorReply_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VsMonitorReply) Reset()         { *m = VsMonitorReply{} }
func (m *VsMonitorReply) String() string { return proto.CompactTextString(m) }
func (*VsMonitorReply) ProtoMessage()    {}
func (*VsMonitorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{26}
}

func (m *VsMonitorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VsMonitorReply.Unmarshal(m, b)
}
func (m *VsMonitorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VsMonitorReply.Marshal(b, m, deterministic)
}
func (m *VsMonitorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VsMonitorReply.Merge(m, src)
}
func (m *VsMonitorReply) XXX_Size() int {
	return xxx_messageInfo_VsMonitorReply.Size(m)
}
func (m *VsMonitorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VsMonitorReply.DiscardUnknown(m)
}

var xxx_messageInfo_VsMonitorReply proto.InternalMessageInfo

type isVsMonitorReply_Body interface {
	isVsMonitorReply_Body()
}

type VsMonitorReply_PacketOut struct {
	PacketOut *FFPacketOut `protobuf:"bytes,1,opt,name=packet_out,json=packetOut,proto3,oneof"`
}

type VsMonitorReply_PortMod struct {
	PortMod *FFPortMod `protobuf:"bytes,2,opt,name=port_mod,json=portMod,proto3,oneof"`
}

func (*VsMonitorReply_PacketOut) isVsMonitorReply_Body() {}

func (*VsMonitorReply_PortMod) isVsMonitorReply_Body() {}

func (m *VsMonitorReply) GetBody() isVsMonitorReply_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *VsMonitorReply) GetPacketOut() *FFPacketOut {
	if x, ok := m.GetBody().(*VsMonitorReply_PacketOut); ok {
		return x.PacketOut
	}
	return nil
}

func (m *VsMonitorReply) GetPortMod() *FFPortMod {
	if x, ok := m.GetBody().(*VsMonitorReply_PortMod); ok {
		return x.PortMod
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VsMonitorReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VsMonitorReply_PacketOut)(nil),
		(*VsMonitorReply_PortMod)(nil),
	}
}

//
// FIBCDpApi
//
type DpMultipartRequest struct {
	Xid                  uint32               `protobuf:"varint,1,opt,name=xid,proto3" json:"xid,omitempty"`
	Request              *FFMultipart_Request `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DpMultipartRequest) Reset()         { *m = DpMultipartRequest{} }
func (m *DpMultipartRequest) String() string { return proto.CompactTextString(m) }
func (*DpMultipartRequest) ProtoMessage()    {}
func (*DpMultipartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{27}
}

func (m *DpMultipartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpMultipartRequest.Unmarshal(m, b)
}
func (m *DpMultipartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpMultipartRequest.Marshal(b, m, deterministic)
}
func (m *DpMultipartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpMultipartRequest.Merge(m, src)
}
func (m *DpMultipartRequest) XXX_Size() int {
	return xxx_messageInfo_DpMultipartRequest.Size(m)
}
func (m *DpMultipartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DpMultipartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DpMultipartRequest proto.InternalMessageInfo

func (m *DpMultipartRequest) GetXid() uint32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *DpMultipartRequest) GetRequest() *FFMultipart_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type DpMultipartReply struct {
	Xid                  uint32             `protobuf:"varint,1,opt,name=xid,proto3" json:"xid,omitempty"`
	Reply                *FFMultipart_Reply `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DpMultipartReply) Reset()         { *m = DpMultipartReply{} }
func (m *DpMultipartReply) String() string { return proto.CompactTextString(m) }
func (*DpMultipartReply) ProtoMessage()    {}
func (*DpMultipartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{28}
}

func (m *DpMultipartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpMultipartReply.Unmarshal(m, b)
}
func (m *DpMultipartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpMultipartReply.Marshal(b, m, deterministic)
}
func (m *DpMultipartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpMultipartReply.Merge(m, src)
}
func (m *DpMultipartReply) XXX_Size() int {
	return xxx_messageInfo_DpMultipartReply.Size(m)
}
func (m *DpMultipartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DpMultipartReply.DiscardUnknown(m)
}

var xxx_messageInfo_DpMultipartReply proto.InternalMessageInfo

func (m *DpMultipartReply) GetXid() uint32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *DpMultipartReply) GetReply() *FFMultipart_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

type DpMultipartReplyAck struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DpMultipartReplyAck) Reset()         { *m = DpMultipartReplyAck{} }
func (m *DpMultipartReplyAck) String() string { return proto.CompactTextString(m) }
func (*DpMultipartReplyAck) ProtoMessage()    {}
func (*DpMultipartReplyAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{29}
}

func (m *DpMultipartReplyAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpMultipartReplyAck.Unmarshal(m, b)
}
func (m *DpMultipartReplyAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpMultipartReplyAck.Marshal(b, m, deterministic)
}
func (m *DpMultipartReplyAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpMultipartReplyAck.Merge(m, src)
}
func (m *DpMultipartReplyAck) XXX_Size() int {
	return xxx_messageInfo_DpMultipartReplyAck.Size(m)
}
func (m *DpMultipartReplyAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DpMultipartReplyAck.DiscardUnknown(m)
}

var xxx_messageInfo_DpMultipartReplyAck proto.InternalMessageInfo

type DpMonitorRequest struct {
	DpId                 uint64         `protobuf:"varint,1,opt,name=dp_id,json=dpId,proto3" json:"dp_id,omitempty"`
	DpType               FFHello_DpType `protobuf:"varint,2,opt,name=dp_type,json=dpType,proto3,enum=fibcapi.FFHello_DpType" json:"dp_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DpMonitorRequest) Reset()         { *m = DpMonitorRequest{} }
func (m *DpMonitorRequest) String() string { return proto.CompactTextString(m) }
func (*DpMonitorRequest) ProtoMessage()    {}
func (*DpMonitorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{30}
}

func (m *DpMonitorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpMonitorRequest.Unmarshal(m, b)
}
func (m *DpMonitorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpMonitorRequest.Marshal(b, m, deterministic)
}
func (m *DpMonitorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpMonitorRequest.Merge(m, src)
}
func (m *DpMonitorRequest) XXX_Size() int {
	return xxx_messageInfo_DpMonitorRequest.Size(m)
}
func (m *DpMonitorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DpMonitorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DpMonitorRequest proto.InternalMessageInfo

func (m *DpMonitorRequest) GetDpId() uint64 {
	if m != nil {
		return m.DpId
	}
	return 0
}

func (m *DpMonitorRequest) GetDpType() FFHello_DpType {
	if m != nil {
		return m.DpType
	}
	return FFHello_NOP
}

type DpMonitorReply struct {
	// Types that are valid to be assigned to Body:
	//	*DpMonitorReply_PacketOut
	//	*DpMonitorReply_PortMod
	//	*DpMonitorReply_FlowMod
	//	*DpMonitorReply_GroupMod
	//	*DpMonitorReply_Multipart
	Body                 isDpMonitorReply_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DpMonitorReply) Reset()         { *m = DpMonitorReply{} }
func (m *DpMonitorReply) String() string { return proto.CompactTextString(m) }
func (*DpMonitorReply) ProtoMessage()    {}
func (*DpMonitorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{31}
}

func (m *DpMonitorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpMonitorReply.Unmarshal(m, b)
}
func (m *DpMonitorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpMonitorReply.Marshal(b, m, deterministic)
}
func (m *DpMonitorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpMonitorReply.Merge(m, src)
}
func (m *DpMonitorReply) XXX_Size() int {
	return xxx_messageInfo_DpMonitorReply.Size(m)
}
func (m *DpMonitorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DpMonitorReply.DiscardUnknown(m)
}

var xxx_messageInfo_DpMonitorReply proto.InternalMessageInfo

type isDpMonitorReply_Body interface {
	isDpMonitorReply_Body()
}

type DpMonitorReply_PacketOut struct {
	PacketOut *FFPacketOut `protobuf:"bytes,1,opt,name=packet_out,json=packetOut,proto3,oneof"`
}

type DpMonitorReply_PortMod struct {
	PortMod *FFPortMod `protobuf:"bytes,2,opt,name=port_mod,json=portMod,proto3,oneof"`
}

type DpMonitorReply_FlowMod struct {
	FlowMod *FlowMod `protobuf:"bytes,3,opt,name=flow_mod,json=flowMod,proto3,oneof"`
}

type DpMonitorReply_GroupMod struct {
	GroupMod *GroupMod `protobuf:"bytes,4,opt,name=group_mod,json=groupMod,proto3,oneof"`
}

type DpMonitorReply_Multipart struct {
	Multipart *DpMultipartRequest `protobuf:"bytes,5,opt,name=multipart,proto3,oneof"`
}

func (*DpMonitorReply_PacketOut) isDpMonitorReply_Body() {}

func (*DpMonitorReply_PortMod) isDpMonitorReply_Body() {}

func (*DpMonitorReply_FlowMod) isDpMonitorReply_Body() {}

func (*DpMonitorReply_GroupMod) isDpMonitorReply_Body() {}

func (*DpMonitorReply_Multipart) isDpMonitorReply_Body() {}

func (m *DpMonitorReply) GetBody() isDpMonitorReply_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *DpMonitorReply) GetPacketOut() *FFPacketOut {
	if x, ok := m.GetBody().(*DpMonitorReply_PacketOut); ok {
		return x.PacketOut
	}
	return nil
}

func (m *DpMonitorReply) GetPortMod() *FFPortMod {
	if x, ok := m.GetBody().(*DpMonitorReply_PortMod); ok {
		return x.PortMod
	}
	return nil
}

func (m *DpMonitorReply) GetFlowMod() *FlowMod {
	if x, ok := m.GetBody().(*DpMonitorReply_FlowMod); ok {
		return x.FlowMod
	}
	return nil
}

func (m *DpMonitorReply) GetGroupMod() *GroupMod {
	if x, ok := m.GetBody().(*DpMonitorReply_GroupMod); ok {
		return x.GroupMod
	}
	return nil
}

func (m *DpMonitorReply) GetMultipart() *DpMultipartRequest {
	if x, ok := m.GetBody().(*DpMonitorReply_Multipart); ok {
		return x.Multipart
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DpMonitorReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DpMonitorReply_PacketOut)(nil),
		(*DpMonitorReply_PortMod)(nil),
		(*DpMonitorReply_FlowMod)(nil),
		(*DpMonitorReply_GroupMod)(nil),
		(*DpMonitorReply_Multipart)(nil),
	}
}

//
// Database
//
type DbPortKey struct {
	ReId                 string   `protobuf:"bytes,1,opt,name=re_id,json=reId,proto3" json:"re_id,omitempty"`
	Ifname               string   `protobuf:"bytes,2,opt,name=ifname,proto3" json:"ifname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DbPortKey) Reset()         { *m = DbPortKey{} }
func (m *DbPortKey) String() string { return proto.CompactTextString(m) }
func (*DbPortKey) ProtoMessage()    {}
func (*DbPortKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{32}
}

func (m *DbPortKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbPortKey.Unmarshal(m, b)
}
func (m *DbPortKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbPortKey.Marshal(b, m, deterministic)
}
func (m *DbPortKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbPortKey.Merge(m, src)
}
func (m *DbPortKey) XXX_Size() int {
	return xxx_messageInfo_DbPortKey.Size(m)
}
func (m *DbPortKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DbPortKey.DiscardUnknown(m)
}

var xxx_messageInfo_DbPortKey proto.InternalMessageInfo

func (m *DbPortKey) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *DbPortKey) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

type DbPortValue struct {
	DpId                 uint64   `protobuf:"varint,1,opt,name=dp_id,json=dpId,proto3" json:"dp_id,omitempty"`
	ReId                 string   `protobuf:"bytes,2,opt,name=re_id,json=reId,proto3" json:"re_id,omitempty"`
	PortId               uint32   `protobuf:"varint,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Enter                bool     `protobuf:"varint,4,opt,name=enter,proto3" json:"enter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DbPortValue) Reset()         { *m = DbPortValue{} }
func (m *DbPortValue) String() string { return proto.CompactTextString(m) }
func (*DbPortValue) ProtoMessage()    {}
func (*DbPortValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{33}
}

func (m *DbPortValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbPortValue.Unmarshal(m, b)
}
func (m *DbPortValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbPortValue.Marshal(b, m, deterministic)
}
func (m *DbPortValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbPortValue.Merge(m, src)
}
func (m *DbPortValue) XXX_Size() int {
	return xxx_messageInfo_DbPortValue.Size(m)
}
func (m *DbPortValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DbPortValue.DiscardUnknown(m)
}

var xxx_messageInfo_DbPortValue proto.InternalMessageInfo

func (m *DbPortValue) GetDpId() uint64 {
	if m != nil {
		return m.DpId
	}
	return 0
}

func (m *DbPortValue) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *DbPortValue) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *DbPortValue) GetEnter() bool {
	if m != nil {
		return m.Enter
	}
	return false
}

type DbPortEntry struct {
	Key                  *DbPortKey   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ParentKey            *DbPortKey   `protobuf:"bytes,2,opt,name=parent_key,json=parentKey,proto3" json:"parent_key,omitempty"`
	MasterKey            *DbPortKey   `protobuf:"bytes,3,opt,name=master_key,json=masterKey,proto3" json:"master_key,omitempty"`
	VmPort               *DbPortValue `protobuf:"bytes,4,opt,name=vm_port,json=vmPort,proto3" json:"vm_port,omitempty"`
	DpPort               *DbPortValue `protobuf:"bytes,5,opt,name=dp_port,json=dpPort,proto3" json:"dp_port,omitempty"`
	VsPort               *DbPortValue `protobuf:"bytes,6,opt,name=vs_port,json=vsPort,proto3" json:"vs_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DbPortEntry) Reset()         { *m = DbPortEntry{} }
func (m *DbPortEntry) String() string { return proto.CompactTextString(m) }
func (*DbPortEntry) ProtoMessage()    {}
func (*DbPortEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{34}
}

func (m *DbPortEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbPortEntry.Unmarshal(m, b)
}
func (m *DbPortEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbPortEntry.Marshal(b, m, deterministic)
}
func (m *DbPortEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbPortEntry.Merge(m, src)
}
func (m *DbPortEntry) XXX_Size() int {
	return xxx_messageInfo_DbPortEntry.Size(m)
}
func (m *DbPortEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DbPortEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DbPortEntry proto.InternalMessageInfo

func (m *DbPortEntry) GetKey() *DbPortKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DbPortEntry) GetParentKey() *DbPortKey {
	if m != nil {
		return m.ParentKey
	}
	return nil
}

func (m *DbPortEntry) GetMasterKey() *DbPortKey {
	if m != nil {
		return m.MasterKey
	}
	return nil
}

func (m *DbPortEntry) GetVmPort() *DbPortValue {
	if m != nil {
		return m.VmPort
	}
	return nil
}

func (m *DbPortEntry) GetDpPort() *DbPortValue {
	if m != nil {
		return m.DpPort
	}
	return nil
}

func (m *DbPortEntry) GetVsPort() *DbPortValue {
	if m != nil {
		return m.VsPort
	}
	return nil
}

type DbIdEntry struct {
	ReId                 string   `protobuf:"bytes,1,opt,name=re_id,json=reId,proto3" json:"re_id,omitempty"`
	DpId                 uint64   `protobuf:"varint,2,opt,name=dp_id,json=dpId,proto3" json:"dp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DbIdEntry) Reset()         { *m = DbIdEntry{} }
func (m *DbIdEntry) String() string { return proto.CompactTextString(m) }
func (*DbIdEntry) ProtoMessage()    {}
func (*DbIdEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{35}
}

func (m *DbIdEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbIdEntry.Unmarshal(m, b)
}
func (m *DbIdEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbIdEntry.Marshal(b, m, deterministic)
}
func (m *DbIdEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbIdEntry.Merge(m, src)
}
func (m *DbIdEntry) XXX_Size() int {
	return xxx_messageInfo_DbIdEntry.Size(m)
}
func (m *DbIdEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DbIdEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DbIdEntry proto.InternalMessageInfo

func (m *DbIdEntry) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *DbIdEntry) GetDpId() uint64 {
	if m != nil {
		return m.DpId
	}
	return 0
}

type DbDpEntry struct {
	Type                 DbDpEntry_Type `protobuf:"varint,1,opt,name=type,proto3,enum=fibcapi.DbDpEntry_Type" json:"type,omitempty"`
	Id                   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
	Remote               string         `protobuf:"bytes,3,opt,name=remote,proto3" json:"remote,omitempty"`
>>>>>>> develop
=======
	Remote               string         `protobuf:"bytes,3,opt,name=remote,proto3" json:"remote,omitempty"`
>>>>>>> develop
=======
	Remote               string         `protobuf:"bytes,3,opt,name=remote,proto3" json:"remote,omitempty"`
>>>>>>> develop
=======
	Remote               string         `protobuf:"bytes,3,opt,name=remote,proto3" json:"remote,omitempty"`
>>>>>>> develop
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DbDpEntry) Reset()         { *m = DbDpEntry{} }
func (m *DbDpEntry) String() string { return proto.CompactTextString(m) }
func (*DbDpEntry) ProtoMessage()    {}
func (*DbDpEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{36}
}

func (m *DbDpEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbDpEntry.Unmarshal(m, b)
}
func (m *DbDpEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbDpEntry.Marshal(b, m, deterministic)
}
func (m *DbDpEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbDpEntry.Merge(m, src)
}
func (m *DbDpEntry) XXX_Size() int {
	return xxx_messageInfo_DbDpEntry.Size(m)
}
func (m *DbDpEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DbDpEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DbDpEntry proto.InternalMessageInfo

func (m *DbDpEntry) GetType() DbDpEntry_Type {
	if m != nil {
		return m.Type
	}
	return DbDpEntry_NOP
}

func (m *DbDpEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> develop
=======
>>>>>>> develop
=======
>>>>>>> develop
func (m *DbDpEntry) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> develop
=======
>>>>>>> develop
=======
>>>>>>> develop
=======
>>>>>>> develop
type StatsEntry struct {
	Group                string   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsEntry) Reset()         { *m = StatsEntry{} }
func (m *StatsEntry) String() string { return proto.CompactTextString(m) }
func (*StatsEntry) ProtoMessage()    {}
func (*StatsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{37}
}

func (m *StatsEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsEntry.Unmarshal(m, b)
}
func (m *StatsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsEntry.Marshal(b, m, deterministic)
}
func (m *StatsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsEntry.Merge(m, src)
}
func (m *StatsEntry) XXX_Size() int {
	return xxx_messageInfo_StatsEntry.Size(m)
}
func (m *StatsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StatsEntry proto.InternalMessageInfo

func (m *StatsEntry) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *StatsEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatsEntry) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ApGetStatsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApGetStatsRequest) Reset()         { *m = ApGetStatsRequest{} }
func (m *ApGetStatsRequest) String() string { return proto.CompactTextString(m) }
func (*ApGetStatsRequest) ProtoMessage()    {}
func (*ApGetStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5600d3affcc40088, []int{38}
}

func (m *ApGetStatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApGetStatsRequest.Unmarshal(m, b)
}
func (m *ApGetStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApGetStatsRequest.Marshal(b, m, deterministic)
}
func (m *ApGetStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApGetStatsRequest.Merge(m, src)
}
func (m *ApGetStatsRequest) XXX_Size() int {
	return xxx_messageInfo_ApGetStatsRequest.Size(m)
}
func (m *ApGetStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApGetStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApGetStatsRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("fibcapi.DbDpEntry_Type", DbDpEntry_Type_name, DbDpEntry_Type_value)
	proto.RegisterType((*HelloReply)(nil), "fibcapi.HelloReply")
	proto.RegisterType((*PortConfigReply)(nil), "fibcapi.PortConfigReply")
	proto.RegisterType((*L2AddrReply)(nil), "fibcapi.L2AddrReply")
	proto.RegisterType((*FlowModReply)(nil), "fibcapi.FlowModReply")
	proto.RegisterType((*GroupModReply)(nil), "fibcapi.GroupModReply")
	proto.RegisterType((*L2AddrStatusReply)(nil), "fibcapi.L2AddrStatusReply")
	proto.RegisterType((*FFHelloReply)(nil), "fibcapi.FFHelloReply")
	proto.RegisterType((*FFPacketReply)(nil), "fibcapi.FFPacketReply")
	proto.RegisterType((*FFPacketInReply)(nil), "fibcapi.FFPacketInReply")
	proto.RegisterType((*FFPortStatusReply)(nil), "fibcapi.FFPortStatusReply")
	proto.RegisterType((*ApMonitorRequest)(nil), "fibcapi.ApMonitorRequest")
	proto.RegisterType((*ApMonitorReplyLog)(nil), "fibcapi.ApMonitorReplyLog")
	proto.RegisterType((*ApMonitorReply)(nil), "fibcapi.ApMonitorReply")
	proto.RegisterType((*ApGetPortEntriesRequest)(nil), "fibcapi.ApGetPortEntriesRequest")
	proto.RegisterType((*ApGetIdEntriesRequest)(nil), "fibcapi.ApGetIdEntriesRequest")
	proto.RegisterType((*ApGetDpEntriesRequest)(nil), "fibcapi.ApGetDpEntriesRequest")
	proto.RegisterType((*ApAddPortEntryReply)(nil), "fibcapi.ApAddPortEntryReply")
	proto.RegisterType((*ApAddIdEntryReply)(nil), "fibcapi.ApAddIdEntryReply")
	proto.RegisterType((*ApDelPortEntryReply)(nil), "fibcapi.ApDelPortEntryReply")
	proto.RegisterType((*ApDelIdEntryReply)(nil), "fibcapi.ApDelIdEntryReply")
	proto.RegisterType((*ApGetPortStatsRequest)(nil), "fibcapi.ApGetPortStatsRequest")
	proto.RegisterType((*ApModPortStatsRequest)(nil), "fibcapi.ApModPortStatsRequest")
	proto.RegisterType((*ApModPortStatsReply)(nil), "fibcapi.ApModPortStatsReply")
	proto.RegisterType((*VmMonitorRequest)(nil), "fibcapi.VmMonitorRequest")
	proto.RegisterType((*VmMonitorReply)(nil), "fibcapi.VmMonitorReply")
	proto.RegisterType((*VsMonitorRequest)(nil), "fibcapi.VsMonitorRequest")
	proto.RegisterType((*VsMonitorReply)(nil), "fibcapi.VsMonitorReply")
	proto.RegisterType((*DpMultipartRequest)(nil), "fibcapi.DpMultipartRequest")
	proto.RegisterType((*DpMultipartReply)(nil), "fibcapi.DpMultipartReply")
	proto.RegisterType((*DpMultipartReplyAck)(nil), "fibcapi.DpMultipartReplyAck")
	proto.RegisterType((*DpMonitorRequest)(nil), "fibcapi.DpMonitorRequest")
	proto.RegisterType((*DpMonitorReply)(nil), "fibcapi.DpMonitorReply")
	proto.RegisterType((*DbPortKey)(nil), "fibcapi.DbPortKey")
	proto.RegisterType((*DbPortValue)(nil), "fibcapi.DbPortValue")
	proto.RegisterType((*DbPortEntry)(nil), "fibcapi.DbPortEntry")
	proto.RegisterType((*DbIdEntry)(nil), "fibcapi.DbIdEntry")
	proto.RegisterType((*DbDpEntry)(nil), "fibcapi.DbDpEntry")
	proto.RegisterType((*StatsEntry)(nil), "fibcapi.StatsEntry")
	proto.RegisterType((*ApGetStatsRequest)(nil), "fibcapi.ApGetStatsRequest")
}

func init() { proto.RegisterFile("fibcapis.proto", fileDescriptor_5600d3affcc40088) }

var fileDescriptor_5600d3affcc40088 = []byte{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	// 1457 bytes of a gzipped FileDescriptorProto
=======
	// 1468 bytes of a gzipped FileDescriptorProto
>>>>>>> develop
=======
	// 1468 bytes of a gzipped FileDescriptorProto
>>>>>>> develop
=======
	// 1468 bytes of a gzipped FileDescriptorProto
>>>>>>> develop
=======
	// 1468 bytes of a gzipped FileDescriptorProto
>>>>>>> develop
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6f, 0x1b, 0x45,
	0x10, 0xf7, 0x57, 0x9c, 0x78, 0xe2, 0xb8, 0xce, 0x26, 0x69, 0xdc, 0xa3, 0x42, 0xd1, 0x09, 0x89,
	0x08, 0x54, 0x13, 0x8c, 0x5a, 0x55, 0xaa, 0x00, 0xb9, 0xbd, 0xba, 0xb6, 0x1a, 0x27, 0xe1, 0x8a,
	0x22, 0x21, 0x24, 0x2c, 0x27, 0xbb, 0x89, 0xac, 0x9e, 0x7d, 0xcb, 0xdd, 0xd9, 0xc5, 0x6f, 0x3c,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	0x80, 0x78, 0xe6, 0x1f, 0xe0, 0x91, 0x07, 0xfe, 0x06, 0x5e, 0xf8, 0xcf, 0xd0, 0xec, 0xc7, 0x79,
	0xef, 0xc3, 0x15, 0x55, 0x1f, 0x78, 0xf2, 0xce, 0xec, 0xcc, 0xef, 0xe6, 0x6b, 0x77, 0x66, 0x0d,
	0x8d, 0x9b, 0xc9, 0xd5, 0xf5, 0x98, 0x4f, 0xc2, 0x36, 0x0f, 0xfc, 0xc8, 0x27, 0x9b, 0x8a, 0xb6,
	0x76, 0xd4, 0x42, 0xf2, 0xed, 0x3a, 0x40, 0x9f, 0x79, 0x9e, 0xef, 0x32, 0xee, 0x2d, 0xed, 0x5d,
	0xb8, 0x73, 0xe1, 0x07, 0xd1, 0x33, 0x7f, 0x76, 0x33, 0xb9, 0x95, 0xac, 0x1d, 0xd8, 0x3e, 0xed,
	0x74, 0x29, 0x0d, 0x24, 0xd9, 0x80, 0x7a, 0xcf, 0xf3, 0xdf, 0x0c, 0x7d, 0x2a, 0xe9, 0x3b, 0xb0,
	0xf3, 0x22, 0xf0, 0xe7, 0x3c, 0x66, 0xec, 0xc1, 0xae, 0x94, 0x7f, 0x15, 0x8d, 0xa3, 0x79, 0xb8,
	0xd2, 0xea, 0x19, 0xdf, 0xb9, 0x03, 0x3b, 0xbd, 0xde, 0xc5, 0xf8, 0xfa, 0x35, 0x8b, 0xe2, 0x0f,
	0x6b, 0xc6, 0x60, 0x16, 0x03, 0xf5, 0x7a, 0x68, 0x8d, 0x09, 0x44, 0xa0, 0xd9, 0xe5, 0x43, 0x7f,
	0x36, 0x89, 0xfc, 0xc0, 0x65, 0x3f, 0xce, 0x59, 0x18, 0xd9, 0xdf, 0xc0, 0xae, 0xc1, 0xe3, 0xde,
	0xf2, 0xd4, 0xbf, 0x25, 0x04, 0x2a, 0xde, 0x64, 0xc6, 0x5a, 0xc5, 0xa3, 0xe2, 0x71, 0xcd, 0x15,
	0x6b, 0xb2, 0x0f, 0x1b, 0x1e, 0x5b, 0x30, 0xaf, 0x55, 0x3a, 0x2a, 0x1e, 0xef, 0xb8, 0x92, 0x40,
	0xc9, 0x68, 0x32, 0x65, 0xad, 0xf2, 0x51, 0xf1, 0xb8, 0xec, 0x8a, 0xb5, 0xdd, 0x87, 0x46, 0x12,
	0x92, 0xb4, 0xa1, 0xec, 0xf9, 0xb7, 0x02, 0x6e, 0xbb, 0x63, 0xb5, 0x75, 0x10, 0x33, 0x1f, 0xee,
	0x17, 0x5c, 0x14, 0x7c, 0x5a, 0x85, 0xca, 0x95, 0x4f, 0x97, 0xf6, 0x3d, 0x38, 0xec, 0xf2, 0x17,
	0x2c, 0x42, 0x47, 0x9e, 0xcf, 0xa2, 0x60, 0xc2, 0x42, 0x6d, 0xf7, 0x21, 0x1c, 0x88, 0xad, 0x01,
	0x4d, 0x6d, 0x38, 0x6a, 0xc3, 0xe1, 0xc9, 0x0d, 0xf2, 0x29, 0x54, 0xa2, 0x25, 0x97, 0x4e, 0x35,
	0x3a, 0x87, 0xb1, 0x15, 0xce, 0x95, 0x14, 0x5d, 0xb6, 0xbf, 0x5d, 0x72, 0xe6, 0x0a, 0x21, 0xfb,
	0x00, 0xf6, 0xba, 0xbc, 0x4b, 0xa9, 0xfe, 0xf2, 0x32, 0x0e, 0xab, 0x60, 0xcb, 0xaf, 0x2a, 0xa6,
	0x90, 0x75, 0x98, 0x97, 0x27, 0xeb, 0x30, 0x2f, 0x21, 0xfb, 0xbd, 0xb2, 0x4e, 0xa7, 0x26, 0xb6,
	0x6e, 0x0f, 0x36, 0x28, 0x1f, 0x4d, 0xa8, 0x30, 0xaf, 0xe2, 0x56, 0x28, 0x1f, 0x50, 0x72, 0x08,
	0x9b, 0xdc, 0x0f, 0xa2, 0xd1, 0xcc, 0x57, 0x51, 0xaf, 0x22, 0x79, 0xe6, 0x63, 0x32, 0x66, 0xe3,
	0x29, 0x0b, 0x5b, 0xe5, 0xa3, 0xf2, 0x71, 0xcd, 0x95, 0x84, 0xfd, 0x5b, 0x11, 0xd1, 0x87, 0x3e,
	0x7d, 0x4f, 0xf4, 0x4f, 0xa0, 0x7c, 0x3d, 0xa5, 0x22, 0xa7, 0x8d, 0x4e, 0x2b, 0x0e, 0xd4, 0xaa,
	0xa0, 0xc2, 0xf6, 0xb3, 0x29, 0x75, 0x51, 0x68, 0x65, 0x49, 0xc5, 0xb4, 0x44, 0x84, 0x24, 0x69,
	0x08, 0x7a, 0xff, 0x31, 0x34, 0x2f, 0xa7, 0xc9, 0x02, 0x44, 0xd3, 0x02, 0xa6, 0x4d, 0xab, 0xb9,
	0x95, 0x80, 0x0d, 0xa8, 0xfd, 0x4f, 0x11, 0x1a, 0x86, 0x24, 0xd6, 0xd0, 0x23, 0xd8, 0x16, 0xd6,
	0x86, 0xa2, 0xa0, 0x55, 0x2d, 0xed, 0xc5, 0xc6, 0xad, 0x6a, 0xbd, 0x5f, 0x70, 0x81, 0xc7, 0x14,
	0x39, 0x81, 0x1a, 0xe5, 0x5a, 0xab, 0x24, 0xb4, 0x76, 0x57, 0xb9, 0xe7, 0xb1, 0xce, 0x16, 0x55,
	0x6b, 0xf2, 0x25, 0x34, 0xbc, 0xce, 0x68, 0x4c, 0x69, 0xa0, 0xd5, 0xca, 0x42, 0xed, 0x20, 0x56,
	0x33, 0xcf, 0x68, 0xbf, 0xe0, 0xd6, 0x3d, 0x83, 0x8e, 0x8b, 0xf7, 0x3b, 0x68, 0x5e, 0x86, 0x59,
	0x67, 0x17, 0xa1, 0x91, 0x87, 0x45, 0x38, 0xa0, 0xe4, 0x04, 0x36, 0x29, 0x1f, 0x89, 0xda, 0x2c,
	0xa5, 0x6a, 0x53, 0x9d, 0xfb, 0xb6, 0xc3, 0x45, 0x6d, 0x56, 0xa9, 0xf8, 0xb5, 0x7f, 0xc6, 0xf0,
	0x84, 0x89, 0xf0, 0x3c, 0x04, 0xe0, 0xe2, 0x06, 0x18, 0xf9, 0xf3, 0x48, 0x45, 0x67, 0xdf, 0x4c,
	0x9d, 0xd8, 0x3c, 0x9f, 0x47, 0xfd, 0x82, 0x5b, 0xe3, 0x9a, 0x20, 0x9f, 0xc1, 0x96, 0x88, 0xea,
	0xd4, 0xa7, 0x2a, 0x38, 0x24, 0x95, 0xef, 0xa1, 0x4f, 0xfb, 0x05, 0x57, 0x54, 0xca, 0xd0, 0xa7,
	0xb1, 0x77, 0x3f, 0x00, 0x71, 0xf8, 0x70, 0xee, 0x45, 0x13, 0x3e, 0x0e, 0x22, 0xed, 0x5f, 0x13,
	0xca, 0x3f, 0x29, 0xef, 0x76, 0x5c, 0x5c, 0x92, 0x47, 0xb0, 0x19, 0xc8, 0x4d, 0x85, 0x7f, 0xdf,
	0xc0, 0x8f, 0xf5, 0xdb, 0x0a, 0xc0, 0xd5, 0xc2, 0xf6, 0x25, 0x34, 0x13, 0xf8, 0xe8, 0x63, 0x16,
	0xfd, 0x04, 0x8b, 0x87, 0x7b, 0x4b, 0x85, 0x6d, 0xad, 0xc1, 0xe6, 0xde, 0xd2, 0x95, 0x82, 0x58,
	0x99, 0x69, 0xdc, 0xee, 0xf5, 0x6b, 0x4c, 0x96, 0xc3, 0xb3, 0xc9, 0xca, 0x1e, 0x9a, 0x77, 0x4f,
	0xd6, 0x1f, 0x25, 0x68, 0x38, 0xfc, 0xff, 0x48, 0x16, 0x79, 0x00, 0x5b, 0x37, 0x9e, 0xff, 0x46,
	0x28, 0xc8, 0x1a, 0x6e, 0xae, 0x14, 0x64, 0x23, 0x42, 0xf1, 0x1b, 0xb9, 0xc4, 0xa3, 0x72, 0x8b,
	0xed, 0x48, 0xc8, 0x57, 0x52, 0x47, 0x45, 0x37, 0x2a, 0x3c, 0x2a, 0xb7, 0x6a, 0x4d, 0x9e, 0x40,
	0x6d, 0xaa, 0x63, 0xd9, 0xda, 0x10, 0x1a, 0x1f, 0x18, 0x87, 0x2b, 0x5d, 0x1f, 0xe8, 0x4e, 0x2c,
	0x1f, 0x97, 0xd2, 0x63, 0xa8, 0x39, 0x57, 0x68, 0xfd, 0x4b, 0xb6, 0xcc, 0xbd, 0x0e, 0xc8, 0x5d,
	0xa8, 0x4e, 0x6e, 0xf0, 0x66, 0x11, 0x6e, 0xd7, 0x5c, 0x45, 0xd9, 0x37, 0xb0, 0x2d, 0x35, 0x2f,
	0xc7, 0xde, 0x9c, 0xe5, 0x27, 0x2c, 0x06, 0x2c, 0x19, 0x80, 0xfa, 0xea, 0x9b, 0xc8, 0xb8, 0xa8,
	0xab, 0x6f, 0x20, 0xae, 0x33, 0x36, 0x8b, 0x58, 0x20, 0xdc, 0xdf, 0x72, 0x25, 0x61, 0xff, 0x59,
	0xd2, 0x1f, 0x12, 0x57, 0x39, 0xf9, 0x08, 0xca, 0xaf, 0xd9, 0x52, 0x25, 0x8e, 0x18, 0x9d, 0x44,
	0x79, 0xe1, 0xe2, 0x36, 0xf9, 0x1c, 0xb3, 0x1c, 0xb0, 0x59, 0x34, 0x42, 0xe1, 0xd2, 0x5a, 0xe1,
	0x9a, 0x94, 0x7a, 0x29, 0x55, 0xa6, 0xe3, 0x30, 0x62, 0x81, 0x50, 0x29, 0xaf, 0x57, 0x91, 0x52,
	0xa8, 0xf2, 0x00, 0x36, 0x17, 0xd3, 0x11, 0x9a, 0xaf, 0x52, 0xb6, 0x9f, 0x92, 0x17, 0xb1, 0x71,
	0xab, 0x8b, 0x29, 0x12, 0x28, 0x4e, 0xb9, 0x14, 0xdf, 0x78, 0x9b, 0x38, 0xe5, 0x5a, 0x7c, 0x11,
	0x4a, 0xf1, 0xea, 0x5b, 0xd1, 0x43, 0x24, 0xec, 0x87, 0x98, 0x4a, 0xd5, 0xf0, 0xf2, 0x53, 0x19,
	0xe7, 0xa8, 0xb4, 0xca, 0x91, 0xfd, 0x6b, 0x11, 0xf5, 0x54, 0x1b, 0x7e, 0xa7, 0x46, 0x4d, 0x1a,
	0x50, 0x8a, 0x73, 0x5b, 0x9a, 0x50, 0xfb, 0x09, 0x54, 0x70, 0x97, 0x6c, 0x42, 0xf9, 0xec, 0xfc,
	0xa2, 0x59, 0x20, 0x35, 0xd8, 0xe8, 0x5e, 0x0c, 0xcf, 0xcf, 0x9a, 0x45, 0x5c, 0x5e, 0x0e, 0x71,
	0x59, 0xc2, 0xa5, 0x23, 0xb8, 0x65, 0xc1, 0x7d, 0x85, 0xcb, 0x8a, 0x7d, 0x0a, 0x20, 0xba, 0x95,
	0xb4, 0x63, 0x1f, 0x36, 0x44, 0xa1, 0x2b, 0xfb, 0x25, 0x81, 0x13, 0x8f, 0x51, 0x89, 0x62, 0x8d,
	0x92, 0x0b, 0x8c, 0x83, 0xc8, 0x58, 0xc5, 0x95, 0x84, 0x1c, 0x00, 0x5e, 0xb0, 0x44, 0x27, 0xee,
	0xfc, 0x5e, 0x85, 0x5a, 0x6f, 0xf0, 0xf4, 0x59, 0x97, 0x77, 0xf9, 0x84, 0x74, 0x61, 0x53, 0x5d,
	0x0c, 0xe4, 0x5e, 0xde, 0x58, 0x24, 0x74, 0xac, 0xc3, 0x35, 0x13, 0x93, 0x5d, 0x38, 0x29, 0x92,
	0x3e, 0xd4, 0xcd, 0x79, 0x82, 0x7c, 0x68, 0x08, 0xe7, 0x0c, 0x1a, 0xd6, 0x7e, 0x5e, 0x3f, 0x17,
	0x48, 0x67, 0x50, 0x37, 0x5b, 0x76, 0x02, 0x29, 0x67, 0xa8, 0xb0, 0xee, 0xaf, 0xdd, 0x17, 0xb6,
	0x91, 0x53, 0x68, 0x24, 0x67, 0x37, 0x72, 0x94, 0xb5, 0x2d, 0x39, 0xa4, 0x59, 0xe9, 0xf2, 0x12,
	0x99, 0x10, 0xd6, 0xf5, 0x84, 0x9f, 0x03, 0x47, 0x63, 0xa5, 0xfc, 0x4c, 0xcf, 0x81, 0x96, 0x79,
	0x6c, 0x54, 0x45, 0x1a, 0x38, 0xf1, 0x74, 0x98, 0xc6, 0x49, 0x8f, 0x8d, 0x09, 0x1c, 0x55, 0x7f,
	0x02, 0xc7, 0x81, 0xba, 0x39, 0x1f, 0x92, 0x5c, 0xcb, 0x13, 0x31, 0xca, 0x8e, 0x93, 0x05, 0xf2,
	0x15, 0x00, 0x8e, 0x93, 0x8e, 0xc4, 0xc8, 0xb1, 0xd9, 0xb2, 0x92, 0x08, 0x89, 0x69, 0xb2, 0x40,
	0x9e, 0x42, 0xdd, 0x9c, 0x3c, 0x49, 0xce, 0x65, 0x91, 0xb0, 0x21, 0x3b, 0xa6, 0x0a, 0x1b, 0x70,
	0x4c, 0xfd, 0x8f, 0x36, 0xa4, 0x27, 0xda, 0x02, 0xf9, 0x1a, 0xb6, 0x74, 0x95, 0x13, 0x2b, 0x19,
	0xcd, 0x44, 0xbd, 0xac, 0x86, 0xb5, 0xd5, 0x21, 0xc3, 0x50, 0x76, 0xfe, 0x2e, 0xc9, 0x33, 0x71,
	0x39, 0xc5, 0x33, 0xd1, 0x81, 0xda, 0x2b, 0x36, 0xa3, 0xa2, 0x97, 0x92, 0x46, 0xac, 0x23, 0x68,
	0x03, 0xc3, 0x78, 0x10, 0x15, 0x48, 0x17, 0x1a, 0xa8, 0xb3, 0x7a, 0x7e, 0x91, 0xe4, 0x64, 0x28,
	0x99, 0x56, 0x2b, 0x87, 0xa9, 0x21, 0x1e, 0xc3, 0x36, 0x42, 0xa8, 0xb6, 0x48, 0x32, 0x8d, 0xd2,
	0x3a, 0x48, 0x73, 0xb4, 0xe6, 0x13, 0xa8, 0xa3, 0xa6, 0x6e, 0x90, 0x24, 0xdb, 0x33, 0xad, 0xbb,
	0x19, 0xd6, 0xca, 0xf2, 0x9c, 0x1b, 0x20, 0x3d, 0x24, 0x1b, 0x37, 0x40, 0x72, 0x2a, 0x16, 0xe1,
	0xfb, 0x45, 0x87, 0x2f, 0xc4, 0xf0, 0x3d, 0x32, 0xc3, 0xd7, 0x4c, 0x0f, 0x27, 0xa6, 0x17, 0xbd,
	0x44, 0x08, 0x95, 0x17, 0x7a, 0xf8, 0x30, 0xbc, 0xd0, 0x2c, 0xc3, 0x8b, 0xe4, 0xfb, 0x13, 0x4b,
	0x40, 0x28, 0xeb, 0x37, 0xa8, 0x11, 0xfd, 0xd5, 0xc3, 0xd4, 0x6a, 0xe5, 0x30, 0xdf, 0x1e, 0x86,
	0x70, 0x7d, 0x18, 0xc2, 0x4c, 0x18, 0xfe, 0x2a, 0xcb, 0x30, 0x38, 0xfc, 0x7d, 0xc2, 0xf0, 0xde,
	0x9e, 0x3c, 0x5f, 0x95, 0xa2, 0x7a, 0x4f, 0x1c, 0xe4, 0xdc, 0xb8, 0xf3, 0xd0, 0xb2, 0x72, 0xd9,
	0x1a, 0x66, 0x00, 0x4d, 0x84, 0x31, 0x5f, 0x1a, 0xc4, 0x1c, 0x35, 0xcd, 0x0d, 0x03, 0x2a, 0xfb,
	0xef, 0x41, 0x81, 0x9c, 0x03, 0x41, 0xa8, 0xd4, 0x30, 0x7d, 0x2f, 0x7f, 0x4e, 0xe3, 0x9e, 0x79,
	0x61, 0xe4, 0x8d, 0xca, 0x6b, 0x92, 0xe5, 0xac, 0xef, 0x5a, 0x4e, 0xa6, 0x6b, 0x5d, 0x55, 0xc5,
	0x1f, 0x28, 0x5f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x9e, 0x7a, 0x64, 0x6a, 0x11, 0x00,
	0x00,
=======
=======
>>>>>>> develop
=======
>>>>>>> develop
=======
>>>>>>> develop
	0x20, 0xf1, 0xcc, 0x1f, 0x00, 0x8f, 0x3c, 0xf0, 0x37, 0xf0, 0xc2, 0x7f, 0x86, 0x66, 0x3f, 0xce,
	0x7b, 0x1f, 0xae, 0xa8, 0xfa, 0xc0, 0x93, 0x77, 0x66, 0x67, 0x7e, 0x37, 0x5f, 0xbb, 0x33, 0x6b,
	0x68, 0xdc, 0x4c, 0xae, 0xae, 0xc7, 0x7c, 0x12, 0xb6, 0x79, 0xe0, 0x47, 0x3e, 0xd9, 0x54, 0xb4,
	0xb5, 0xa3, 0x16, 0x92, 0x6f, 0xd7, 0x01, 0xfa, 0xcc, 0xf3, 0x7c, 0x97, 0x71, 0x6f, 0x69, 0xef,
	0xc2, 0x9d, 0x0b, 0x3f, 0x88, 0x9e, 0xf9, 0xb3, 0x9b, 0xc9, 0xad, 0x64, 0xed, 0xc0, 0xf6, 0x69,
	0xa7, 0x4b, 0x69, 0x20, 0xc9, 0x06, 0xd4, 0x7b, 0x9e, 0xff, 0x66, 0xe8, 0x53, 0x49, 0xdf, 0x81,
	0x9d, 0x17, 0x81, 0x3f, 0xe7, 0x31, 0x63, 0x0f, 0x76, 0xa5, 0xfc, 0xab, 0x68, 0x1c, 0xcd, 0xc3,
	0x95, 0x56, 0xcf, 0xf8, 0xce, 0x1d, 0xd8, 0xe9, 0xf5, 0x2e, 0xc6, 0xd7, 0xaf, 0x59, 0x14, 0x7f,
	0x58, 0x33, 0x06, 0xb3, 0x18, 0xa8, 0xd7, 0x43, 0x6b, 0x4c, 0x20, 0x02, 0xcd, 0x2e, 0x1f, 0xfa,
	0xb3, 0x49, 0xe4, 0x07, 0x2e, 0xfb, 0x71, 0xce, 0xc2, 0xc8, 0xfe, 0x06, 0x76, 0x0d, 0x1e, 0xf7,
	0x96, 0xa7, 0xfe, 0x2d, 0x21, 0x50, 0xf1, 0x26, 0x33, 0xd6, 0x2a, 0x1e, 0x15, 0x8f, 0x6b, 0xae,
	0x58, 0x93, 0x7d, 0xd8, 0xf0, 0xd8, 0x82, 0x79, 0xad, 0xd2, 0x51, 0xf1, 0x78, 0xc7, 0x95, 0x04,
	0x4a, 0x46, 0x93, 0x29, 0x6b, 0x95, 0x8f, 0x8a, 0xc7, 0x65, 0x57, 0xac, 0xed, 0x3e, 0x34, 0x92,
	0x90, 0xa4, 0x0d, 0x65, 0xcf, 0xbf, 0x15, 0x70, 0xdb, 0x1d, 0xab, 0xad, 0x83, 0x98, 0xf9, 0x70,
	0xbf, 0xe0, 0xa2, 0xe0, 0xd3, 0x2a, 0x54, 0xae, 0x7c, 0xba, 0xb4, 0xef, 0xc1, 0x61, 0x97, 0xbf,
	0x60, 0x11, 0x3a, 0xf2, 0x7c, 0x16, 0x05, 0x13, 0x16, 0x6a, 0xbb, 0x0f, 0xe1, 0x40, 0x6c, 0x0d,
	0x68, 0x6a, 0xc3, 0x51, 0x1b, 0x0e, 0x4f, 0x6e, 0x90, 0x4f, 0xa1, 0x12, 0x2d, 0xb9, 0x74, 0xaa,
	0xd1, 0x39, 0x8c, 0xad, 0x70, 0xae, 0xa4, 0xe8, 0xb2, 0xfd, 0xed, 0x92, 0x33, 0x57, 0x08, 0xd9,
	0x07, 0xb0, 0xd7, 0xe5, 0x5d, 0x4a, 0xf5, 0x97, 0x97, 0x71, 0x58, 0x05, 0x5b, 0x7e, 0x55, 0x31,
	0x85, 0xac, 0xc3, 0xbc, 0x3c, 0x59, 0x87, 0x79, 0x09, 0xd9, 0xef, 0x95, 0x75, 0x3a, 0x35, 0xb1,
	0x75, 0x7b, 0xb0, 0x41, 0xf9, 0x68, 0x42, 0x85, 0x79, 0x15, 0xb7, 0x42, 0xf9, 0x80, 0x92, 0x43,
	0xd8, 0xe4, 0x7e, 0x10, 0x8d, 0x66, 0xbe, 0x8a, 0x7a, 0x15, 0xc9, 0x33, 0x1f, 0x93, 0x31, 0x1b,
	0x4f, 0x59, 0xd8, 0x2a, 0x1f, 0x95, 0x8f, 0x6b, 0xae, 0x24, 0xec, 0x5f, 0x8b, 0x88, 0x3e, 0xf4,
	0xe9, 0x7b, 0xa2, 0x7f, 0x02, 0xe5, 0xeb, 0x29, 0x15, 0x39, 0x6d, 0x74, 0x5a, 0x71, 0xa0, 0x56,
	0x05, 0x15, 0xb6, 0x9f, 0x4d, 0xa9, 0x8b, 0x42, 0x2b, 0x4b, 0x2a, 0xa6, 0x25, 0x22, 0x24, 0x49,
	0x43, 0xd0, 0xfb, 0x8f, 0xa1, 0x79, 0x39, 0x4d, 0x16, 0x20, 0x9a, 0x16, 0x30, 0x6d, 0x5a, 0xcd,
	0xad, 0x04, 0x6c, 0x40, 0xed, 0x7f, 0x8a, 0xd0, 0x30, 0x24, 0xb1, 0x86, 0x1e, 0xc1, 0xb6, 0xb0,
	0x36, 0x14, 0x05, 0xad, 0x6a, 0x69, 0x2f, 0x36, 0x6e, 0x55, 0xeb, 0xfd, 0x82, 0x0b, 0x3c, 0xa6,
	0xc8, 0x09, 0xd4, 0x28, 0xd7, 0x5a, 0x25, 0xa1, 0xb5, 0xbb, 0xca, 0x3d, 0x8f, 0x75, 0xb6, 0xa8,
	0x5a, 0x93, 0x2f, 0xa1, 0xe1, 0x75, 0x46, 0x63, 0x4a, 0x03, 0xad, 0x56, 0x16, 0x6a, 0x07, 0xb1,
	0x9a, 0x79, 0x46, 0xfb, 0x05, 0xb7, 0xee, 0x19, 0x74, 0x5c, 0xbc, 0xdf, 0x41, 0xf3, 0x32, 0xcc,
	0x3a, 0xbb, 0x08, 0x8d, 0x3c, 0x2c, 0xc2, 0x01, 0x25, 0x27, 0xb0, 0x49, 0xf9, 0x48, 0xd4, 0x66,
	0x29, 0x55, 0x9b, 0xea, 0xdc, 0xb7, 0x1d, 0x2e, 0x6a, 0xb3, 0x4a, 0xc5, 0xaf, 0xfd, 0x33, 0x86,
	0x27, 0x4c, 0x84, 0xe7, 0x21, 0x00, 0x17, 0x37, 0xc0, 0xc8, 0x9f, 0x47, 0x2a, 0x3a, 0xfb, 0x66,
	0xea, 0xc4, 0xe6, 0xf9, 0x3c, 0xea, 0x17, 0xdc, 0x1a, 0xd7, 0x04, 0xf9, 0x0c, 0xb6, 0x44, 0x54,
	0xa7, 0x3e, 0x55, 0xc1, 0x21, 0xa9, 0x7c, 0x0f, 0x7d, 0xda, 0x2f, 0xb8, 0xa2, 0x52, 0x86, 0x3e,
	0x8d, 0xbd, 0xfb, 0x01, 0x88, 0xc3, 0x87, 0x73, 0x2f, 0x9a, 0xf0, 0x71, 0x10, 0x69, 0xff, 0x9a,
	0x50, 0xfe, 0x49, 0x79, 0xb7, 0xe3, 0xe2, 0x92, 0x3c, 0x82, 0xcd, 0x40, 0x6e, 0x2a, 0xfc, 0xfb,
	0x06, 0x7e, 0xac, 0xdf, 0x56, 0x00, 0xae, 0x16, 0xb6, 0x2f, 0xa1, 0x99, 0xc0, 0x47, 0x1f, 0xb3,
	0xe8, 0x27, 0x58, 0x3c, 0xdc, 0x5b, 0x2a, 0x6c, 0x6b, 0x0d, 0x36, 0xf7, 0x96, 0xae, 0x14, 0xc4,
	0xca, 0x4c, 0xe3, 0x76, 0xaf, 0x5f, 0x63, 0xb2, 0x1c, 0x9e, 0x4d, 0x56, 0xf6, 0xd0, 0xbc, 0x7b,
	0xb2, 0xfe, 0x28, 0x41, 0xc3, 0xe1, 0xff, 0x47, 0xb2, 0xc8, 0x03, 0xd8, 0xba, 0xf1, 0xfc, 0x37,
	0x42, 0x41, 0xd6, 0x70, 0x73, 0xa5, 0x20, 0x1b, 0x11, 0x8a, 0xdf, 0xc8, 0x25, 0x1e, 0x95, 0x5b,
	0x6c, 0x47, 0x42, 0xbe, 0x92, 0x3a, 0x2a, 0xba, 0x51, 0xe1, 0x51, 0xb9, 0x55, 0x6b, 0xf2, 0x04,
	0x6a, 0x53, 0x1d, 0xcb, 0xd6, 0x86, 0xd0, 0xf8, 0xc0, 0x38, 0x5c, 0xe9, 0xfa, 0x40, 0x77, 0x62,
	0xf9, 0xb8, 0x94, 0x1e, 0x43, 0xcd, 0xb9, 0x42, 0xeb, 0x5f, 0xb2, 0x65, 0xee, 0x75, 0x40, 0xee,
	0x42, 0x75, 0x72, 0x83, 0x37, 0x8b, 0x70, 0xbb, 0xe6, 0x2a, 0xca, 0xbe, 0x81, 0x6d, 0xa9, 0x79,
	0x39, 0xf6, 0xe6, 0x2c, 0x3f, 0x61, 0x31, 0x60, 0xc9, 0x00, 0xd4, 0x57, 0xdf, 0x44, 0xc6, 0x45,
	0x5d, 0x7d, 0x03, 0x71, 0x9d, 0xb1, 0x59, 0xc4, 0x02, 0xe1, 0xfe, 0x96, 0x2b, 0x09, 0xfb, 0xcf,
	0x92, 0xfe, 0x90, 0xb8, 0xca, 0xc9, 0x47, 0x50, 0x7e, 0xcd, 0x96, 0x2a, 0x71, 0xc4, 0xe8, 0x24,
	0xca, 0x0b, 0x17, 0xb7, 0xc9, 0xe7, 0x98, 0xe5, 0x80, 0xcd, 0xa2, 0x11, 0x0a, 0x97, 0xd6, 0x0a,
	0xd7, 0xa4, 0xd4, 0x4b, 0xa9, 0x32, 0x1d, 0x87, 0x11, 0x0b, 0x84, 0x4a, 0x79, 0xbd, 0x8a, 0x94,
	0x42, 0x95, 0x07, 0xb0, 0xb9, 0x98, 0x8e, 0xd0, 0x7c, 0x95, 0xb2, 0xfd, 0x94, 0xbc, 0x88, 0x8d,
	0x5b, 0x5d, 0x4c, 0x91, 0x40, 0x71, 0xca, 0xa5, 0xf8, 0xc6, 0xdb, 0xc4, 0x29, 0xd7, 0xe2, 0x8b,
	0x50, 0x8a, 0x57, 0xdf, 0x8a, 0x1e, 0x22, 0x61, 0x3f, 0xc4, 0x54, 0xaa, 0x86, 0x97, 0x9f, 0xca,
	0x38, 0x47, 0xa5, 0x55, 0x8e, 0xec, 0xdf, 0x8b, 0xa8, 0xa7, 0xda, 0xf0, 0x3b, 0x35, 0x6a, 0xd2,
	0x80, 0x52, 0x9c, 0xdb, 0xd2, 0x44, 0x94, 0x4a, 0xc0, 0xa6, 0x7e, 0x24, 0x47, 0x92, 0x9a, 0xab,
	0x28, 0xfb, 0x09, 0x54, 0x50, 0x8b, 0x6c, 0x42, 0xf9, 0xec, 0xfc, 0xa2, 0x59, 0x20, 0x35, 0xd8,
	0xe8, 0x5e, 0x0c, 0xcf, 0xcf, 0x9a, 0x45, 0x5c, 0x5e, 0x0e, 0x71, 0x59, 0xc2, 0xa5, 0x23, 0xb8,
	0x65, 0xc1, 0x7d, 0x85, 0xcb, 0x8a, 0x7d, 0x0a, 0x20, 0xba, 0x98, 0xb4, 0x6f, 0x1f, 0x36, 0xc4,
	0x01, 0x50, 0x7e, 0x49, 0x02, 0x27, 0x21, 0xa3, 0x42, 0xc5, 0x1a, 0x25, 0x17, 0x18, 0x1f, 0x61,
	0x4b, 0xc5, 0x95, 0x84, 0x1c, 0x0c, 0x5e, 0xb0, 0x44, 0x87, 0xee, 0xfc, 0x56, 0x85, 0x5a, 0x6f,
	0xf0, 0xf4, 0x59, 0x97, 0x77, 0xf9, 0x84, 0x74, 0x61, 0x53, 0x5d, 0x18, 0xe4, 0x5e, 0xde, 0xb8,
	0x24, 0x74, 0xac, 0xc3, 0x35, 0x93, 0x94, 0x5d, 0x38, 0x29, 0x92, 0x3e, 0xd4, 0xcd, 0x39, 0x83,
	0x7c, 0x68, 0x08, 0xe7, 0x0c, 0x20, 0xd6, 0x7e, 0x5e, 0x9f, 0x17, 0x48, 0x67, 0x50, 0x37, 0x5b,
	0x79, 0x02, 0x29, 0x67, 0xd8, 0xb0, 0xee, 0xaf, 0xdd, 0x17, 0xb6, 0x91, 0x53, 0x68, 0x24, 0x67,
	0x3a, 0x72, 0x94, 0xb5, 0x2d, 0x39, 0xbc, 0x59, 0xe9, 0xb2, 0x13, 0x99, 0x10, 0xd6, 0xf5, 0x84,
	0x9f, 0x03, 0x47, 0x63, 0xa5, 0xfc, 0x4c, 0xcf, 0x87, 0x96, 0x79, 0x9c, 0x54, 0xa5, 0x1a, 0x38,
	0xf1, 0xd4, 0x98, 0xc6, 0x49, 0x8f, 0x93, 0x09, 0x1c, 0x55, 0x97, 0x02, 0xc7, 0x81, 0xba, 0x39,
	0x37, 0x92, 0x5c, 0xcb, 0x13, 0x31, 0xca, 0x8e, 0x99, 0x05, 0xf2, 0x15, 0x00, 0x8e, 0x99, 0x8e,
	0xc4, 0xc8, 0xb1, 0xd9, 0xb2, 0x92, 0x08, 0x89, 0x29, 0xb3, 0x40, 0x9e, 0x42, 0xdd, 0x9c, 0x48,
	0x49, 0xce, 0x25, 0x92, 0xb0, 0x21, 0x3b, 0xbe, 0x0a, 0x1b, 0x70, 0x7c, 0xfd, 0x8f, 0x36, 0xa4,
	0x27, 0xdd, 0x02, 0xf9, 0x1a, 0xb6, 0x74, 0x95, 0x13, 0x2b, 0x19, 0xcd, 0x44, 0xbd, 0xac, 0x86,
	0xb8, 0xd5, 0x21, 0xc3, 0x50, 0x76, 0xfe, 0x2e, 0xc9, 0x33, 0x71, 0x39, 0xc5, 0x33, 0xd1, 0x81,
	0xda, 0x2b, 0x36, 0xa3, 0xa2, 0xc7, 0x92, 0x46, 0xac, 0x23, 0x68, 0x03, 0xc3, 0x78, 0x28, 0x15,
	0x48, 0x17, 0x1a, 0xa8, 0xb3, 0x7a, 0x96, 0x91, 0xe4, 0xc4, 0x28, 0x99, 0x56, 0x2b, 0x87, 0xa9,
	0x21, 0x1e, 0xc3, 0x36, 0x42, 0xa8, 0x76, 0x49, 0x32, 0x0d, 0xd4, 0x3a, 0x48, 0x73, 0xb4, 0xe6,
	0x13, 0xa8, 0xa3, 0xa6, 0x6e, 0x9c, 0x24, 0xdb, 0x4b, 0xad, 0xbb, 0x19, 0xd6, 0xca, 0xf2, 0x9c,
	0x1b, 0x20, 0x3d, 0x3c, 0x1b, 0x37, 0x40, 0x72, 0x5a, 0x16, 0xe1, 0xfb, 0x45, 0x87, 0x2f, 0xc4,
	0xf0, 0x3d, 0x32, 0xc3, 0xd7, 0x4c, 0x0f, 0x2d, 0xa6, 0x17, 0xbd, 0x44, 0x08, 0x95, 0x17, 0x7a,
	0x28, 0x31, 0xbc, 0xd0, 0x2c, 0xc3, 0x8b, 0xe4, 0xbb, 0x14, 0x4b, 0x40, 0x28, 0xeb, 0xb7, 0xa9,
	0x11, 0xfd, 0xd5, 0x83, 0xd5, 0x6a, 0xe5, 0x30, 0xdf, 0x1e, 0x86, 0x70, 0x7d, 0x18, 0xc2, 0x4c,
	0x18, 0xfe, 0x2a, 0xcb, 0x30, 0x38, 0xfc, 0x7d, 0xc2, 0xf0, 0xde, 0x9e, 0x3c, 0x5f, 0x95, 0xa2,
	0x7a, 0x67, 0x1c, 0xe4, 0xdc, 0xb8, 0xf3, 0xd0, 0xb2, 0x72, 0xd9, 0x1a, 0x66, 0x00, 0x4d, 0x84,
	0x31, 0x5f, 0x20, 0xc4, 0x1c, 0x41, 0xcd, 0x0d, 0x03, 0x2a, 0xfb, 0xaf, 0x42, 0x81, 0x9c, 0x03,
	0x41, 0xa8, 0xd4, 0x90, 0x7d, 0x2f, 0x7f, 0x7e, 0xe3, 0x9e, 0x79, 0x61, 0xe4, 0x8d, 0xd0, 0x6b,
	0x92, 0xe5, 0xac, 0xef, 0x5a, 0x4e, 0xa6, 0x6b, 0x5d, 0x55, 0xc5, 0x1f, 0x2b, 0x5f, 0xfc, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xc6, 0x1b, 0x43, 0x05, 0x82, 0x11, 0x00, 0x00,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> develop
=======
>>>>>>> develop
=======
>>>>>>> develop
=======
>>>>>>> develop
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FIBCApApiClient is the client API for FIBCApApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FIBCApApiClient interface {
	Monitor(ctx context.Context, in *ApMonitorRequest, opts ...grpc.CallOption) (FIBCApApi_MonitorClient, error)
	GetPortStats(ctx context.Context, in *ApGetPortStatsRequest, opts ...grpc.CallOption) (FIBCApApi_GetPortStatsClient, error)
	ModPortStats(ctx context.Context, in *ApModPortStatsRequest, opts ...grpc.CallOption) (*ApModPortStatsReply, error)
	GetPortEntries(ctx context.Context, in *ApGetPortEntriesRequest, opts ...grpc.CallOption) (FIBCApApi_GetPortEntriesClient, error)
	GetIDEntries(ctx context.Context, in *ApGetIdEntriesRequest, opts ...grpc.CallOption) (FIBCApApi_GetIDEntriesClient, error)
	GetDpEntries(ctx context.Context, in *ApGetDpEntriesRequest, opts ...grpc.CallOption) (FIBCApApi_GetDpEntriesClient, error)
	AddPortEntry(ctx context.Context, in *DbPortEntry, opts ...grpc.CallOption) (*ApAddPortEntryReply, error)
	AddIDEntry(ctx context.Context, in *DbIdEntry, opts ...grpc.CallOption) (*ApAddIdEntryReply, error)
	DelPortEntry(ctx context.Context, in *DbPortKey, opts ...grpc.CallOption) (*ApDelPortEntryReply, error)
	DelIDEntry(ctx context.Context, in *DbIdEntry, opts ...grpc.CallOption) (*ApDelIdEntryReply, error)
	GetStats(ctx context.Context, in *ApGetStatsRequest, opts ...grpc.CallOption) (FIBCApApi_GetStatsClient, error)
}

type fIBCApApiClient struct {
	cc *grpc.ClientConn
}

func NewFIBCApApiClient(cc *grpc.ClientConn) FIBCApApiClient {
	return &fIBCApApiClient{cc}
}

func (c *fIBCApApiClient) Monitor(ctx context.Context, in *ApMonitorRequest, opts ...grpc.CallOption) (FIBCApApi_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCApApi_serviceDesc.Streams[0], "/fibcapi.FIBCApApi/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCApApiMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCApApi_MonitorClient interface {
	Recv() (*ApMonitorReply, error)
	grpc.ClientStream
}

type fIBCApApiMonitorClient struct {
	grpc.ClientStream
}

func (x *fIBCApApiMonitorClient) Recv() (*ApMonitorReply, error) {
	m := new(ApMonitorReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fIBCApApiClient) GetPortStats(ctx context.Context, in *ApGetPortStatsRequest, opts ...grpc.CallOption) (FIBCApApi_GetPortStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCApApi_serviceDesc.Streams[1], "/fibcapi.FIBCApApi/GetPortStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCApApiGetPortStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCApApi_GetPortStatsClient interface {
	Recv() (*FFPortStats, error)
	grpc.ClientStream
}

type fIBCApApiGetPortStatsClient struct {
	grpc.ClientStream
}

func (x *fIBCApApiGetPortStatsClient) Recv() (*FFPortStats, error) {
	m := new(FFPortStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fIBCApApiClient) ModPortStats(ctx context.Context, in *ApModPortStatsRequest, opts ...grpc.CallOption) (*ApModPortStatsReply, error) {
	out := new(ApModPortStatsReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCApApi/ModPortStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCApApiClient) GetPortEntries(ctx context.Context, in *ApGetPortEntriesRequest, opts ...grpc.CallOption) (FIBCApApi_GetPortEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCApApi_serviceDesc.Streams[2], "/fibcapi.FIBCApApi/GetPortEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCApApiGetPortEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCApApi_GetPortEntriesClient interface {
	Recv() (*DbPortEntry, error)
	grpc.ClientStream
}

type fIBCApApiGetPortEntriesClient struct {
	grpc.ClientStream
}

func (x *fIBCApApiGetPortEntriesClient) Recv() (*DbPortEntry, error) {
	m := new(DbPortEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fIBCApApiClient) GetIDEntries(ctx context.Context, in *ApGetIdEntriesRequest, opts ...grpc.CallOption) (FIBCApApi_GetIDEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCApApi_serviceDesc.Streams[3], "/fibcapi.FIBCApApi/GetIDEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCApApiGetIDEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCApApi_GetIDEntriesClient interface {
	Recv() (*DbIdEntry, error)
	grpc.ClientStream
}

type fIBCApApiGetIDEntriesClient struct {
	grpc.ClientStream
}

func (x *fIBCApApiGetIDEntriesClient) Recv() (*DbIdEntry, error) {
	m := new(DbIdEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fIBCApApiClient) GetDpEntries(ctx context.Context, in *ApGetDpEntriesRequest, opts ...grpc.CallOption) (FIBCApApi_GetDpEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCApApi_serviceDesc.Streams[4], "/fibcapi.FIBCApApi/GetDpEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCApApiGetDpEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCApApi_GetDpEntriesClient interface {
	Recv() (*DbDpEntry, error)
	grpc.ClientStream
}

type fIBCApApiGetDpEntriesClient struct {
	grpc.ClientStream
}

func (x *fIBCApApiGetDpEntriesClient) Recv() (*DbDpEntry, error) {
	m := new(DbDpEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fIBCApApiClient) AddPortEntry(ctx context.Context, in *DbPortEntry, opts ...grpc.CallOption) (*ApAddPortEntryReply, error) {
	out := new(ApAddPortEntryReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCApApi/AddPortEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCApApiClient) AddIDEntry(ctx context.Context, in *DbIdEntry, opts ...grpc.CallOption) (*ApAddIdEntryReply, error) {
	out := new(ApAddIdEntryReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCApApi/AddIDEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCApApiClient) DelPortEntry(ctx context.Context, in *DbPortKey, opts ...grpc.CallOption) (*ApDelPortEntryReply, error) {
	out := new(ApDelPortEntryReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCApApi/DelPortEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCApApiClient) DelIDEntry(ctx context.Context, in *DbIdEntry, opts ...grpc.CallOption) (*ApDelIdEntryReply, error) {
	out := new(ApDelIdEntryReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCApApi/DelIDEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCApApiClient) GetStats(ctx context.Context, in *ApGetStatsRequest, opts ...grpc.CallOption) (FIBCApApi_GetStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCApApi_serviceDesc.Streams[5], "/fibcapi.FIBCApApi/GetStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCApApiGetStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCApApi_GetStatsClient interface {
	Recv() (*StatsEntry, error)
	grpc.ClientStream
}

type fIBCApApiGetStatsClient struct {
	grpc.ClientStream
}

func (x *fIBCApApiGetStatsClient) Recv() (*StatsEntry, error) {
	m := new(StatsEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FIBCApApiServer is the server API for FIBCApApi service.
type FIBCApApiServer interface {
	Monitor(*ApMonitorRequest, FIBCApApi_MonitorServer) error
	GetPortStats(*ApGetPortStatsRequest, FIBCApApi_GetPortStatsServer) error
	ModPortStats(context.Context, *ApModPortStatsRequest) (*ApModPortStatsReply, error)
	GetPortEntries(*ApGetPortEntriesRequest, FIBCApApi_GetPortEntriesServer) error
	GetIDEntries(*ApGetIdEntriesRequest, FIBCApApi_GetIDEntriesServer) error
	GetDpEntries(*ApGetDpEntriesRequest, FIBCApApi_GetDpEntriesServer) error
	AddPortEntry(context.Context, *DbPortEntry) (*ApAddPortEntryReply, error)
	AddIDEntry(context.Context, *DbIdEntry) (*ApAddIdEntryReply, error)
	DelPortEntry(context.Context, *DbPortKey) (*ApDelPortEntryReply, error)
	DelIDEntry(context.Context, *DbIdEntry) (*ApDelIdEntryReply, error)
	GetStats(*ApGetStatsRequest, FIBCApApi_GetStatsServer) error
}

// UnimplementedFIBCApApiServer can be embedded to have forward compatible implementations.
type UnimplementedFIBCApApiServer struct {
}

func (*UnimplementedFIBCApApiServer) Monitor(req *ApMonitorRequest, srv FIBCApApi_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (*UnimplementedFIBCApApiServer) GetPortStats(req *ApGetPortStatsRequest, srv FIBCApApi_GetPortStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPortStats not implemented")
}
func (*UnimplementedFIBCApApiServer) ModPortStats(ctx context.Context, req *ApModPortStatsRequest) (*ApModPortStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModPortStats not implemented")
}
func (*UnimplementedFIBCApApiServer) GetPortEntries(req *ApGetPortEntriesRequest, srv FIBCApApi_GetPortEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPortEntries not implemented")
}
func (*UnimplementedFIBCApApiServer) GetIDEntries(req *ApGetIdEntriesRequest, srv FIBCApApi_GetIDEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIDEntries not implemented")
}
func (*UnimplementedFIBCApApiServer) GetDpEntries(req *ApGetDpEntriesRequest, srv FIBCApApi_GetDpEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDpEntries not implemented")
}
func (*UnimplementedFIBCApApiServer) AddPortEntry(ctx context.Context, req *DbPortEntry) (*ApAddPortEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPortEntry not implemented")
}
func (*UnimplementedFIBCApApiServer) AddIDEntry(ctx context.Context, req *DbIdEntry) (*ApAddIdEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDEntry not implemented")
}
func (*UnimplementedFIBCApApiServer) DelPortEntry(ctx context.Context, req *DbPortKey) (*ApDelPortEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPortEntry not implemented")
}
func (*UnimplementedFIBCApApiServer) DelIDEntry(ctx context.Context, req *DbIdEntry) (*ApDelIdEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIDEntry not implemented")
}
func (*UnimplementedFIBCApApiServer) GetStats(req *ApGetStatsRequest, srv FIBCApApi_GetStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}

func RegisterFIBCApApiServer(s *grpc.Server, srv FIBCApApiServer) {
	s.RegisterService(&_FIBCApApi_serviceDesc, srv)
}

func _FIBCApApi_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCApApiServer).Monitor(m, &fIBCApApiMonitorServer{stream})
}

type FIBCApApi_MonitorServer interface {
	Send(*ApMonitorReply) error
	grpc.ServerStream
}

type fIBCApApiMonitorServer struct {
	grpc.ServerStream
}

func (x *fIBCApApiMonitorServer) Send(m *ApMonitorReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FIBCApApi_GetPortStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApGetPortStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCApApiServer).GetPortStats(m, &fIBCApApiGetPortStatsServer{stream})
}

type FIBCApApi_GetPortStatsServer interface {
	Send(*FFPortStats) error
	grpc.ServerStream
}

type fIBCApApiGetPortStatsServer struct {
	grpc.ServerStream
}

func (x *fIBCApApiGetPortStatsServer) Send(m *FFPortStats) error {
	return x.ServerStream.SendMsg(m)
}

func _FIBCApApi_ModPortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApModPortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCApApiServer).ModPortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCApApi/ModPortStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCApApiServer).ModPortStats(ctx, req.(*ApModPortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCApApi_GetPortEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApGetPortEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCApApiServer).GetPortEntries(m, &fIBCApApiGetPortEntriesServer{stream})
}

type FIBCApApi_GetPortEntriesServer interface {
	Send(*DbPortEntry) error
	grpc.ServerStream
}

type fIBCApApiGetPortEntriesServer struct {
	grpc.ServerStream
}

func (x *fIBCApApiGetPortEntriesServer) Send(m *DbPortEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _FIBCApApi_GetIDEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApGetIdEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCApApiServer).GetIDEntries(m, &fIBCApApiGetIDEntriesServer{stream})
}

type FIBCApApi_GetIDEntriesServer interface {
	Send(*DbIdEntry) error
	grpc.ServerStream
}

type fIBCApApiGetIDEntriesServer struct {
	grpc.ServerStream
}

func (x *fIBCApApiGetIDEntriesServer) Send(m *DbIdEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _FIBCApApi_GetDpEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApGetDpEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCApApiServer).GetDpEntries(m, &fIBCApApiGetDpEntriesServer{stream})
}

type FIBCApApi_GetDpEntriesServer interface {
	Send(*DbDpEntry) error
	grpc.ServerStream
}

type fIBCApApiGetDpEntriesServer struct {
	grpc.ServerStream
}

func (x *fIBCApApiGetDpEntriesServer) Send(m *DbDpEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _FIBCApApi_AddPortEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbPortEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCApApiServer).AddPortEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCApApi/AddPortEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCApApiServer).AddPortEntry(ctx, req.(*DbPortEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCApApi_AddIDEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIdEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCApApiServer).AddIDEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCApApi/AddIDEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCApApiServer).AddIDEntry(ctx, req.(*DbIdEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCApApi_DelPortEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbPortKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCApApiServer).DelPortEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCApApi/DelPortEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCApApiServer).DelPortEntry(ctx, req.(*DbPortKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCApApi_DelIDEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbIdEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCApApiServer).DelIDEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCApApi/DelIDEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCApApiServer).DelIDEntry(ctx, req.(*DbIdEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCApApi_GetStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApGetStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCApApiServer).GetStats(m, &fIBCApApiGetStatsServer{stream})
}

type FIBCApApi_GetStatsServer interface {
	Send(*StatsEntry) error
	grpc.ServerStream
}

type fIBCApApiGetStatsServer struct {
	grpc.ServerStream
}

func (x *fIBCApApiGetStatsServer) Send(m *StatsEntry) error {
	return x.ServerStream.SendMsg(m)
}

var _FIBCApApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibcapi.FIBCApApi",
	HandlerType: (*FIBCApApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModPortStats",
			Handler:    _FIBCApApi_ModPortStats_Handler,
		},
		{
			MethodName: "AddPortEntry",
			Handler:    _FIBCApApi_AddPortEntry_Handler,
		},
		{
			MethodName: "AddIDEntry",
			Handler:    _FIBCApApi_AddIDEntry_Handler,
		},
		{
			MethodName: "DelPortEntry",
			Handler:    _FIBCApApi_DelPortEntry_Handler,
		},
		{
			MethodName: "DelIDEntry",
			Handler:    _FIBCApApi_DelIDEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _FIBCApApi_Monitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPortStats",
			Handler:       _FIBCApApi_GetPortStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPortEntries",
			Handler:       _FIBCApApi_GetPortEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIDEntries",
			Handler:       _FIBCApApi_GetIDEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDpEntries",
			Handler:       _FIBCApApi_GetDpEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStats",
			Handler:       _FIBCApApi_GetStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibcapis.proto",
}

// FIBCVmApiClient is the client API for FIBCVmApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FIBCVmApiClient interface {
	SendHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*HelloReply, error)
	SendPortConfig(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfigReply, error)
	SendFlowMod(ctx context.Context, in *FlowMod, opts ...grpc.CallOption) (*FlowModReply, error)
	SendGroupMod(ctx context.Context, in *GroupMod, opts ...grpc.CallOption) (*GroupModReply, error)
	Monitor(ctx context.Context, in *VmMonitorRequest, opts ...grpc.CallOption) (FIBCVmApi_MonitorClient, error)
}

type fIBCVmApiClient struct {
	cc *grpc.ClientConn
}

func NewFIBCVmApiClient(cc *grpc.ClientConn) FIBCVmApiClient {
	return &fIBCVmApiClient{cc}
}

func (c *fIBCVmApiClient) SendHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVmApi/SendHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVmApiClient) SendPortConfig(ctx context.Context, in *PortConfig, opts ...grpc.CallOption) (*PortConfigReply, error) {
	out := new(PortConfigReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVmApi/SendPortConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVmApiClient) SendFlowMod(ctx context.Context, in *FlowMod, opts ...grpc.CallOption) (*FlowModReply, error) {
	out := new(FlowModReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVmApi/SendFlowMod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVmApiClient) SendGroupMod(ctx context.Context, in *GroupMod, opts ...grpc.CallOption) (*GroupModReply, error) {
	out := new(GroupModReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVmApi/SendGroupMod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVmApiClient) Monitor(ctx context.Context, in *VmMonitorRequest, opts ...grpc.CallOption) (FIBCVmApi_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCVmApi_serviceDesc.Streams[0], "/fibcapi.FIBCVmApi/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCVmApiMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCVmApi_MonitorClient interface {
	Recv() (*VmMonitorReply, error)
	grpc.ClientStream
}

type fIBCVmApiMonitorClient struct {
	grpc.ClientStream
}

func (x *fIBCVmApiMonitorClient) Recv() (*VmMonitorReply, error) {
	m := new(VmMonitorReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FIBCVmApiServer is the server API for FIBCVmApi service.
type FIBCVmApiServer interface {
	SendHello(context.Context, *Hello) (*HelloReply, error)
	SendPortConfig(context.Context, *PortConfig) (*PortConfigReply, error)
	SendFlowMod(context.Context, *FlowMod) (*FlowModReply, error)
	SendGroupMod(context.Context, *GroupMod) (*GroupModReply, error)
	Monitor(*VmMonitorRequest, FIBCVmApi_MonitorServer) error
}

// UnimplementedFIBCVmApiServer can be embedded to have forward compatible implementations.
type UnimplementedFIBCVmApiServer struct {
}

func (*UnimplementedFIBCVmApiServer) SendHello(ctx context.Context, req *Hello) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHello not implemented")
}
func (*UnimplementedFIBCVmApiServer) SendPortConfig(ctx context.Context, req *PortConfig) (*PortConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPortConfig not implemented")
}
func (*UnimplementedFIBCVmApiServer) SendFlowMod(ctx context.Context, req *FlowMod) (*FlowModReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFlowMod not implemented")
}
func (*UnimplementedFIBCVmApiServer) SendGroupMod(ctx context.Context, req *GroupMod) (*GroupModReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMod not implemented")
}
func (*UnimplementedFIBCVmApiServer) Monitor(req *VmMonitorRequest, srv FIBCVmApi_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}

func RegisterFIBCVmApiServer(s *grpc.Server, srv FIBCVmApiServer) {
	s.RegisterService(&_FIBCVmApi_serviceDesc, srv)
}

func _FIBCVmApi_SendHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVmApiServer).SendHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVmApi/SendHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVmApiServer).SendHello(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVmApi_SendPortConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVmApiServer).SendPortConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVmApi/SendPortConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVmApiServer).SendPortConfig(ctx, req.(*PortConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVmApi_SendFlowMod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVmApiServer).SendFlowMod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVmApi/SendFlowMod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVmApiServer).SendFlowMod(ctx, req.(*FlowMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVmApi_SendGroupMod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVmApiServer).SendGroupMod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVmApi/SendGroupMod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVmApiServer).SendGroupMod(ctx, req.(*GroupMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVmApi_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VmMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCVmApiServer).Monitor(m, &fIBCVmApiMonitorServer{stream})
}

type FIBCVmApi_MonitorServer interface {
	Send(*VmMonitorReply) error
	grpc.ServerStream
}

type fIBCVmApiMonitorServer struct {
	grpc.ServerStream
}

func (x *fIBCVmApiMonitorServer) Send(m *VmMonitorReply) error {
	return x.ServerStream.SendMsg(m)
}

var _FIBCVmApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibcapi.FIBCVmApi",
	HandlerType: (*FIBCVmApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHello",
			Handler:    _FIBCVmApi_SendHello_Handler,
		},
		{
			MethodName: "SendPortConfig",
			Handler:    _FIBCVmApi_SendPortConfig_Handler,
		},
		{
			MethodName: "SendFlowMod",
			Handler:    _FIBCVmApi_SendFlowMod_Handler,
		},
		{
			MethodName: "SendGroupMod",
			Handler:    _FIBCVmApi_SendGroupMod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _FIBCVmApi_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibcapis.proto",
}

// FIBCVsApiClient is the client API for FIBCVsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FIBCVsApiClient interface {
	SendHello(ctx context.Context, in *FFHello, opts ...grpc.CallOption) (*FFHelloReply, error)
	SendFFPacket(ctx context.Context, in *FFPacket, opts ...grpc.CallOption) (*FFPacketReply, error)
	SendPacketIn(ctx context.Context, in *FFPacketIn, opts ...grpc.CallOption) (*FFPacketInReply, error)
	Monitor(ctx context.Context, in *VsMonitorRequest, opts ...grpc.CallOption) (FIBCVsApi_MonitorClient, error)
}

type fIBCVsApiClient struct {
	cc *grpc.ClientConn
}

func NewFIBCVsApiClient(cc *grpc.ClientConn) FIBCVsApiClient {
	return &fIBCVsApiClient{cc}
}

func (c *fIBCVsApiClient) SendHello(ctx context.Context, in *FFHello, opts ...grpc.CallOption) (*FFHelloReply, error) {
	out := new(FFHelloReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVsApi/SendHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVsApiClient) SendFFPacket(ctx context.Context, in *FFPacket, opts ...grpc.CallOption) (*FFPacketReply, error) {
	out := new(FFPacketReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVsApi/SendFFPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVsApiClient) SendPacketIn(ctx context.Context, in *FFPacketIn, opts ...grpc.CallOption) (*FFPacketInReply, error) {
	out := new(FFPacketInReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCVsApi/SendPacketIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCVsApiClient) Monitor(ctx context.Context, in *VsMonitorRequest, opts ...grpc.CallOption) (FIBCVsApi_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCVsApi_serviceDesc.Streams[0], "/fibcapi.FIBCVsApi/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCVsApiMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCVsApi_MonitorClient interface {
	Recv() (*VsMonitorReply, error)
	grpc.ClientStream
}

type fIBCVsApiMonitorClient struct {
	grpc.ClientStream
}

func (x *fIBCVsApiMonitorClient) Recv() (*VsMonitorReply, error) {
	m := new(VsMonitorReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FIBCVsApiServer is the server API for FIBCVsApi service.
type FIBCVsApiServer interface {
	SendHello(context.Context, *FFHello) (*FFHelloReply, error)
	SendFFPacket(context.Context, *FFPacket) (*FFPacketReply, error)
	SendPacketIn(context.Context, *FFPacketIn) (*FFPacketInReply, error)
	Monitor(*VsMonitorRequest, FIBCVsApi_MonitorServer) error
}

// UnimplementedFIBCVsApiServer can be embedded to have forward compatible implementations.
type UnimplementedFIBCVsApiServer struct {
}

func (*UnimplementedFIBCVsApiServer) SendHello(ctx context.Context, req *FFHello) (*FFHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHello not implemented")
}
func (*UnimplementedFIBCVsApiServer) SendFFPacket(ctx context.Context, req *FFPacket) (*FFPacketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFFPacket not implemented")
}
func (*UnimplementedFIBCVsApiServer) SendPacketIn(ctx context.Context, req *FFPacketIn) (*FFPacketInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacketIn not implemented")
}
func (*UnimplementedFIBCVsApiServer) Monitor(req *VsMonitorRequest, srv FIBCVsApi_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}

func RegisterFIBCVsApiServer(s *grpc.Server, srv FIBCVsApiServer) {
	s.RegisterService(&_FIBCVsApi_serviceDesc, srv)
}

func _FIBCVsApi_SendHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFHello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVsApiServer).SendHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVsApi/SendHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVsApiServer).SendHello(ctx, req.(*FFHello))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVsApi_SendFFPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVsApiServer).SendFFPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVsApi/SendFFPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVsApiServer).SendFFPacket(ctx, req.(*FFPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVsApi_SendPacketIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFPacketIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCVsApiServer).SendPacketIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCVsApi/SendPacketIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCVsApiServer).SendPacketIn(ctx, req.(*FFPacketIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCVsApi_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VsMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCVsApiServer).Monitor(m, &fIBCVsApiMonitorServer{stream})
}

type FIBCVsApi_MonitorServer interface {
	Send(*VsMonitorReply) error
	grpc.ServerStream
}

type fIBCVsApiMonitorServer struct {
	grpc.ServerStream
}

func (x *fIBCVsApiMonitorServer) Send(m *VsMonitorReply) error {
	return x.ServerStream.SendMsg(m)
}

var _FIBCVsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibcapi.FIBCVsApi",
	HandlerType: (*FIBCVsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHello",
			Handler:    _FIBCVsApi_SendHello_Handler,
		},
		{
			MethodName: "SendFFPacket",
			Handler:    _FIBCVsApi_SendFFPacket_Handler,
		},
		{
			MethodName: "SendPacketIn",
			Handler:    _FIBCVsApi_SendPacketIn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _FIBCVsApi_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibcapis.proto",
}

// FIBCDpApiClient is the client API for FIBCDpApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FIBCDpApiClient interface {
	SendHello(ctx context.Context, in *FFHello, opts ...grpc.CallOption) (*FFHelloReply, error)
	SendPacketIn(ctx context.Context, in *FFPacketIn, opts ...grpc.CallOption) (*FFPacketInReply, error)
	SendPortStatus(ctx context.Context, in *FFPortStatus, opts ...grpc.CallOption) (*FFPortStatusReply, error)
	SendL2AddrStatus(ctx context.Context, in *FFL2AddrStatus, opts ...grpc.CallOption) (*L2AddrStatusReply, error)
	SendMultipartReply(ctx context.Context, in *DpMultipartReply, opts ...grpc.CallOption) (*DpMultipartReplyAck, error)
	Monitor(ctx context.Context, in *DpMonitorRequest, opts ...grpc.CallOption) (FIBCDpApi_MonitorClient, error)
}

type fIBCDpApiClient struct {
	cc *grpc.ClientConn
}

func NewFIBCDpApiClient(cc *grpc.ClientConn) FIBCDpApiClient {
	return &fIBCDpApiClient{cc}
}

func (c *fIBCDpApiClient) SendHello(ctx context.Context, in *FFHello, opts ...grpc.CallOption) (*FFHelloReply, error) {
	out := new(FFHelloReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCDpApi/SendHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCDpApiClient) SendPacketIn(ctx context.Context, in *FFPacketIn, opts ...grpc.CallOption) (*FFPacketInReply, error) {
	out := new(FFPacketInReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCDpApi/SendPacketIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCDpApiClient) SendPortStatus(ctx context.Context, in *FFPortStatus, opts ...grpc.CallOption) (*FFPortStatusReply, error) {
	out := new(FFPortStatusReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCDpApi/SendPortStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCDpApiClient) SendL2AddrStatus(ctx context.Context, in *FFL2AddrStatus, opts ...grpc.CallOption) (*L2AddrStatusReply, error) {
	out := new(L2AddrStatusReply)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCDpApi/SendL2AddrStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCDpApiClient) SendMultipartReply(ctx context.Context, in *DpMultipartReply, opts ...grpc.CallOption) (*DpMultipartReplyAck, error) {
	out := new(DpMultipartReplyAck)
	err := c.cc.Invoke(ctx, "/fibcapi.FIBCDpApi/SendMultipartReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fIBCDpApiClient) Monitor(ctx context.Context, in *DpMonitorRequest, opts ...grpc.CallOption) (FIBCDpApi_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FIBCDpApi_serviceDesc.Streams[0], "/fibcapi.FIBCDpApi/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &fIBCDpApiMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FIBCDpApi_MonitorClient interface {
	Recv() (*DpMonitorReply, error)
	grpc.ClientStream
}

type fIBCDpApiMonitorClient struct {
	grpc.ClientStream
}

func (x *fIBCDpApiMonitorClient) Recv() (*DpMonitorReply, error) {
	m := new(DpMonitorReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FIBCDpApiServer is the server API for FIBCDpApi service.
type FIBCDpApiServer interface {
	SendHello(context.Context, *FFHello) (*FFHelloReply, error)
	SendPacketIn(context.Context, *FFPacketIn) (*FFPacketInReply, error)
	SendPortStatus(context.Context, *FFPortStatus) (*FFPortStatusReply, error)
	SendL2AddrStatus(context.Context, *FFL2AddrStatus) (*L2AddrStatusReply, error)
	SendMultipartReply(context.Context, *DpMultipartReply) (*DpMultipartReplyAck, error)
	Monitor(*DpMonitorRequest, FIBCDpApi_MonitorServer) error
}

// UnimplementedFIBCDpApiServer can be embedded to have forward compatible implementations.
type UnimplementedFIBCDpApiServer struct {
}

func (*UnimplementedFIBCDpApiServer) SendHello(ctx context.Context, req *FFHello) (*FFHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHello not implemented")
}
func (*UnimplementedFIBCDpApiServer) SendPacketIn(ctx context.Context, req *FFPacketIn) (*FFPacketInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacketIn not implemented")
}
func (*UnimplementedFIBCDpApiServer) SendPortStatus(ctx context.Context, req *FFPortStatus) (*FFPortStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPortStatus not implemented")
}
func (*UnimplementedFIBCDpApiServer) SendL2AddrStatus(ctx context.Context, req *FFL2AddrStatus) (*L2AddrStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendL2AddrStatus not implemented")
}
func (*UnimplementedFIBCDpApiServer) SendMultipartReply(ctx context.Context, req *DpMultipartReply) (*DpMultipartReplyAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMultipartReply not implemented")
}
func (*UnimplementedFIBCDpApiServer) Monitor(req *DpMonitorRequest, srv FIBCDpApi_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}

func RegisterFIBCDpApiServer(s *grpc.Server, srv FIBCDpApiServer) {
	s.RegisterService(&_FIBCDpApi_serviceDesc, srv)
}

func _FIBCDpApi_SendHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFHello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCDpApiServer).SendHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCDpApi/SendHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCDpApiServer).SendHello(ctx, req.(*FFHello))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCDpApi_SendPacketIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFPacketIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCDpApiServer).SendPacketIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCDpApi/SendPacketIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCDpApiServer).SendPacketIn(ctx, req.(*FFPacketIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCDpApi_SendPortStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFPortStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCDpApiServer).SendPortStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCDpApi/SendPortStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCDpApiServer).SendPortStatus(ctx, req.(*FFPortStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCDpApi_SendL2AddrStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FFL2AddrStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCDpApiServer).SendL2AddrStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCDpApi/SendL2AddrStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCDpApiServer).SendL2AddrStatus(ctx, req.(*FFL2AddrStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCDpApi_SendMultipartReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DpMultipartReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FIBCDpApiServer).SendMultipartReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibcapi.FIBCDpApi/SendMultipartReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FIBCDpApiServer).SendMultipartReply(ctx, req.(*DpMultipartReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _FIBCDpApi_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DpMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FIBCDpApiServer).Monitor(m, &fIBCDpApiMonitorServer{stream})
}

type FIBCDpApi_MonitorServer interface {
	Send(*DpMonitorReply) error
	grpc.ServerStream
}

type fIBCDpApiMonitorServer struct {
	grpc.ServerStream
}

func (x *fIBCDpApiMonitorServer) Send(m *DpMonitorReply) error {
	return x.ServerStream.SendMsg(m)
}

var _FIBCDpApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibcapi.FIBCDpApi",
	HandlerType: (*FIBCDpApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHello",
			Handler:    _FIBCDpApi_SendHello_Handler,
		},
		{
			MethodName: "SendPacketIn",
			Handler:    _FIBCDpApi_SendPacketIn_Handler,
		},
		{
			MethodName: "SendPortStatus",
			Handler:    _FIBCDpApi_SendPortStatus_Handler,
		},
		{
			MethodName: "SendL2AddrStatus",
			Handler:    _FIBCDpApi_SendL2AddrStatus_Handler,
		},
		{
			MethodName: "SendMultipartReply",
			Handler:    _FIBCDpApi_SendMultipartReply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _FIBCDpApi_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibcapis.proto",
}
