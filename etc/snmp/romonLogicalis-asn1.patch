diff --git a/decode.go b/decode.go
index 0506723..01dd268 100644
--- a/decode.go
+++ b/decode.go
@@ -375,6 +375,9 @@ func (ctx *Context) getExpectedFieldElements(value reflect.Value) ([]expectedFie
 func (ctx *Context) getRawValuesFromBytes(data []byte, max int) ([]*rawValue, error) {
 	// Raw values
 	rawValues := []*rawValue{}
+	if max == 0 {
+		return rawValues, nil
+	}
 	reader := bytes.NewBuffer(data)
 	for i := 0; i < max; i++ {
 		// Parse an Asn.1 element
diff --git a/encode.go b/encode.go
index 964441d..b013b9a 100644
--- a/encode.go
+++ b/encode.go
@@ -18,7 +18,6 @@ func (ctx *Context) Encode(obj interface{}) (data []byte, err error) {
 // See (*Context).DecodeWithOptions() for further details regarding types and
 // options.
 func (ctx *Context) EncodeWithOptions(obj interface{}, options string) (data []byte, err error) {
-
 	opts, err := parseOptions(options)
 	if err != nil {
 		return nil, err
@@ -94,6 +93,13 @@ func (ctx *Context) encodeValue(value reflect.Value, opts *fieldOptions) (raw *r
 		encoder = ctx.encodeNull
 	}
 
+	nullVal := reflect.ValueOf(Null{})
+	if  objType.ConvertibleTo(nullVal.Type()) {
+		value = nullVal
+		raw.Tag = tagNull
+		encoder = ctx.encodeNull
+	}
+
 	if encoder == nil {
 		// Generic types:
 		switch value.Kind() {
diff --git a/types.go b/types.go
index 8e54ab5..c936798 100644
--- a/types.go
+++ b/types.go
@@ -184,9 +184,9 @@ func (ctx *Context) encodeOctetString(value reflect.Value) ([]byte, error) {
 		// Invalid type or element type
 		return nil, wrongType("array or slice of bytes", value)
 	}
-	if kind == reflect.Slice {
-		return value.Interface().([]byte), nil
-	}
+	//if kind == reflect.Slice {
+	//	return value.Interface().([]byte), nil
+	//}
 	data := make([]byte, value.Len())
 	for i := 0; i < value.Len(); i++ {
 		data[i] = value.Index(i).Interface().(byte)
