diff --git a/addr_gonla.go b/addr_gonla.go
new file mode 100644
index 0000000..f76e094
--- /dev/null
+++ b/addr_gonla.go
@@ -0,0 +1,9 @@
+// -*- coding: utf-8 -*-
+
+package netlink
+
+import ()
+
+func AddrDeserialize(m []byte) (addr Addr, family, index int, err error) {
+	return parseAddr(m)
+}
diff --git a/link.go b/link.go
index 886d88d..860b921 100644
--- a/link.go
+++ b/link.go
@@ -868,6 +868,9 @@ func (iptun *Iptun) Attrs() *LinkAttrs {
 }
 
 func (iptun *Iptun) Type() string {
+	if iptun.Local.To4() == nil {
+		return "ip6tnl"
+	}
 	return "ipip"
 }
 
diff --git a/link_linux.go b/link_linux.go
index 665c482..2cb1035 100644
--- a/link_linux.go
+++ b/link_linux.go
@@ -1521,6 +1521,7 @@ func LinkDeserialize(hdr *unix.NlMsghdr, m []byte) (Link, error) {
 		linkSlave LinkSlave
 		slaveType string
 	)
+
 	for _, attr := range attrs {
 		switch attr.Attr.Type {
 		case unix.IFLA_LINKINFO:
@@ -1560,7 +1561,7 @@ func LinkDeserialize(hdr *unix.NlMsghdr, m []byte) (Link, error) {
 					case "ipip":
 						link = &Iptun{}
 					case "ip6tnl":
-						link = &Ip6tnl{}
+						link = &Iptun{}
 					case "sit":
 						link = &Sittun{}
 					case "gre":
@@ -1607,7 +1608,7 @@ func LinkDeserialize(hdr *unix.NlMsghdr, m []byte) (Link, error) {
 					case "ipip":
 						parseIptunData(link, data)
 					case "ip6tnl":
-						parseIp6tnlData(link, data)
+						parseIptunData(link, data)
 					case "sit":
 						parseSittunData(link, data)
 					case "gre":
@@ -2178,7 +2179,9 @@ func parseBondData(link Link, data []syscall.NetlinkRouteAttr) {
 		case nl.IFLA_BOND_AD_SELECT:
 			bond.AdSelect = BondAdSelect(data[i].Value[0])
 		case nl.IFLA_BOND_AD_INFO:
-			// TODO: implement
+			if adInfo, err := parseBondAdInfo(data[i].Value); err == nil {
+				bond.AdInfo = adInfo
+			}
 		case nl.IFLA_BOND_AD_ACTOR_SYS_PRIO:
 			bond.AdActorSysPrio = int(native.Uint16(data[i].Value[0:2]))
 		case nl.IFLA_BOND_AD_USER_PORT_KEY:
@@ -2534,13 +2537,17 @@ func addIptunAttrs(iptun *Iptun, linkInfo *nl.RtAttr) {
 
 	data := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)
 
-	ip := iptun.Local.To4()
-	if ip != nil {
+	if ip := iptun.Local; ip != nil {
+		if ip.To4() != nil {
+			ip = ip.To4()
+		}
 		data.AddRtAttr(nl.IFLA_IPTUN_LOCAL, []byte(ip))
 	}
 
-	ip = iptun.Remote.To4()
-	if ip != nil {
+	if ip := iptun.Remote; ip != nil {
+		if ip.To4() != nil {
+			ip = ip.To4()
+		}
 		data.AddRtAttr(nl.IFLA_IPTUN_REMOTE, []byte(ip))
 	}
 
@@ -2561,9 +2568,9 @@ func parseIptunData(link Link, data []syscall.NetlinkRouteAttr) {
 	for _, datum := range data {
 		switch datum.Attr.Type {
 		case nl.IFLA_IPTUN_LOCAL:
-			iptun.Local = net.IP(datum.Value[0:4])
+			iptun.Local = net.IP(datum.Value)
 		case nl.IFLA_IPTUN_REMOTE:
-			iptun.Remote = net.IP(datum.Value[0:4])
+			iptun.Remote = net.IP(datum.Value)
 		case nl.IFLA_IPTUN_TTL:
 			iptun.Ttl = uint8(datum.Value[0])
 		case nl.IFLA_IPTUN_TOS:
diff --git a/link_linux_gonla.go b/link_linux_gonla.go
new file mode 100644
index 0000000..7a6c5ea
--- /dev/null
+++ b/link_linux_gonla.go
@@ -0,0 +1,71 @@
+package netlink
+
+import (
+	"net"
+
+	"github.com/vishvananda/netlink/nl"
+	"golang.org/x/sys/unix"
+)
+
+func LinkSetMulticastOn(link Link) error {
+	return pkgHandle.LinkSetMulticastOn(link)
+}
+
+func (h *Handle) LinkSetMulticastOn(link Link) error {
+	base := link.Attrs()
+	h.ensureIndex(base)
+	req := h.newNetlinkRequest(unix.RTM_NEWLINK, unix.NLM_F_ACK)
+
+	msg := nl.NewIfInfomsg(unix.AF_UNSPEC)
+	msg.Change = unix.IFF_MULTICAST
+	msg.Flags = unix.IFF_MULTICAST
+
+	msg.Index = int32(base.Index)
+	req.AddData(msg)
+
+	_, err := req.Execute(unix.NETLINK_ROUTE, 0)
+	return err
+}
+
+func LinkSetMulticastOff(link Link) error {
+	return pkgHandle.LinkSetMulticastOff(link)
+}
+
+func (h *Handle) LinkSetMulticastOff(link Link) error {
+	base := link.Attrs()
+	h.ensureIndex(base)
+	req := h.newNetlinkRequest(unix.RTM_NEWLINK, unix.NLM_F_ACK)
+
+	msg := nl.NewIfInfomsg(unix.AF_UNSPEC)
+	msg.Change = unix.IFF_MULTICAST
+	msg.Index = int32(base.Index)
+	req.AddData(msg)
+
+	_, err := req.Execute(unix.NETLINK_ROUTE, 0)
+	return err
+}
+
+func parseBondAdInfo(b []byte) (*BondAdInfo, error) {
+	attrs, err := nl.ParseRouteAttr(b)
+	if err != nil {
+		return nil, err
+	}
+
+	var adInfo BondAdInfo
+	for _, attr := range attrs {
+		switch attr.Attr.Type {
+		case nl.IFLA_BOND_AD_INFO_AGGREGATOR:
+			adInfo.AggregatorId = int(native.Uint16(attr.Value[0:2]))
+		case nl.IFLA_BOND_AD_INFO_NUM_PORTS:
+			adInfo.NumPorts = int(native.Uint16(attr.Value[0:2]))
+		case nl.IFLA_BOND_AD_INFO_ACTOR_KEY:
+			adInfo.ActorKey = int(native.Uint16(attr.Value[0:2]))
+		case nl.IFLA_BOND_AD_INFO_PARTNER_KEY:
+			adInfo.PartnerKey = int(native.Uint16(attr.Value[0:2]))
+		case nl.IFLA_BOND_AD_INFO_PARTNER_MAC:
+			adInfo.PartnerMac = net.HardwareAddr(attr.Value[0:6])
+		}
+	}
+
+	return &adInfo, nil
+}
diff --git a/nl/mpls_gonla.go b/nl/mpls_gonla.go
new file mode 100644
index 0000000..bb11deb
--- /dev/null
+++ b/nl/mpls_gonla.go
@@ -0,0 +1,5 @@
+// -*- coding: utf-8 -*-
+
+package nl
+
+const RTNLGRP_MPLS_ROUTE = 27
diff --git a/nl/nl_linux_gonla.go b/nl/nl_linux_gonla.go
new file mode 100644
index 0000000..a193981
--- /dev/null
+++ b/nl/nl_linux_gonla.go
@@ -0,0 +1,21 @@
+package nl
+
+import (
+	"golang.org/x/sys/unix"
+)
+
+func (s *NetlinkSocket) SetReceiveBuffer(bufsize int) error {
+	return unix.SetsockoptInt(int(s.fd), unix.SOL_SOCKET, unix.SO_RCVBUF, bufsize)
+}
+
+func (s *NetlinkSocket) GetReceiveBuffer() (int, error) {
+	return unix.GetsockoptInt(int(s.fd), unix.SOL_SOCKET, unix.SO_RCVBUF)
+}
+
+func (s *NetlinkSocket) SetSendBuffer(bufsize int) error {
+	return unix.SetsockoptInt(int(s.fd), unix.SOL_SOCKET, unix.SO_SNDBUF, bufsize)
+}
+
+func (s *NetlinkSocket) GetSendBuffer() (int, error) {
+	return unix.GetsockoptInt(int(s.fd), unix.SOL_SOCKET, unix.SO_SNDBUF)
+}
diff --git a/route.go b/route.go
index 58ff1af..5a24551 100644
--- a/route.go
+++ b/route.go
@@ -56,7 +56,7 @@ func (r Route) String() string {
 		elems = append(elems, fmt.Sprintf("Ifindex: %d", r.LinkIndex))
 	}
 	if r.MPLSDst != nil {
-		elems = append(elems, fmt.Sprintf("Dst: %d", r.MPLSDst))
+		elems = append(elems, fmt.Sprintf("Dst: %d", *r.MPLSDst))
 	} else {
 		elems = append(elems, fmt.Sprintf("Dst: %s", r.Dst))
 	}
diff --git a/route_gonla.go b/route_gonla.go
new file mode 100644
index 0000000..08d5709
--- /dev/null
+++ b/route_gonla.go
@@ -0,0 +1,10 @@
+// -*- coding: utf-8 -*-
+
+package netlink
+
+import ()
+
+func RouteDeserialize(m []byte) (*Route, error) {
+	route, err := deserializeRoute(m)
+	return &route, err
+}
diff --git a/route_linux.go b/route_linux.go
index 562d9d5..8286271 100644
--- a/route_linux.go
+++ b/route_linux.go
@@ -793,6 +793,8 @@ func deserializeRoute(m []byte) (Route, error) {
 		switch attr.Attr.Type {
 		case unix.RTA_GATEWAY:
 			route.Gw = net.IP(attr.Value)
+		case unix.RTA_VIA:
+			route.Gw = net.IP(attr.Value[2:])
 		case unix.RTA_PREFSRC:
 			route.Src = net.IP(attr.Value)
 		case unix.RTA_DST:
@@ -839,6 +841,8 @@ func deserializeRoute(m []byte) (Route, error) {
 					switch attr.Attr.Type {
 					case unix.RTA_GATEWAY:
 						info.Gw = net.IP(attr.Value)
+					case unix.RTA_VIA:
+						info.Gw = net.IP(attr.Value[2:])
 					case unix.RTA_NEWDST:
 						var d Destination
 						switch msg.Family {
